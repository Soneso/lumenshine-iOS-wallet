//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 57 files.
  struct file {
    /// Resource file `EncodeSans-Black.ttf`.
    static let encodeSansBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSans-Black", pathExtension: "ttf")
    /// Resource file `EncodeSans-Bold.ttf`.
    static let encodeSansBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSans-Bold", pathExtension: "ttf")
    /// Resource file `EncodeSans-ExtraBold.ttf`.
    static let encodeSansExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSans-ExtraBold", pathExtension: "ttf")
    /// Resource file `EncodeSans-ExtraLight.ttf`.
    static let encodeSansExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSans-ExtraLight", pathExtension: "ttf")
    /// Resource file `EncodeSans-Light.ttf`.
    static let encodeSansLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSans-Light", pathExtension: "ttf")
    /// Resource file `EncodeSans-Medium.ttf`.
    static let encodeSansMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSans-Medium", pathExtension: "ttf")
    /// Resource file `EncodeSans-Regular.ttf`.
    static let encodeSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSans-Regular", pathExtension: "ttf")
    /// Resource file `EncodeSans-SemiBold.ttf`.
    static let encodeSansSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSans-SemiBold", pathExtension: "ttf")
    /// Resource file `EncodeSans-Thin.ttf`.
    static let encodeSansThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSans-Thin", pathExtension: "ttf")
    /// Resource file `EncodeSansCondensed-Black.ttf`.
    static let encodeSansCondensedBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansCondensed-Black", pathExtension: "ttf")
    /// Resource file `EncodeSansCondensed-Bold.ttf`.
    static let encodeSansCondensedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansCondensed-Bold", pathExtension: "ttf")
    /// Resource file `EncodeSansCondensed-ExtraBold.ttf`.
    static let encodeSansCondensedExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansCondensed-ExtraBold", pathExtension: "ttf")
    /// Resource file `EncodeSansCondensed-ExtraLight.ttf`.
    static let encodeSansCondensedExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansCondensed-ExtraLight", pathExtension: "ttf")
    /// Resource file `EncodeSansCondensed-Light.ttf`.
    static let encodeSansCondensedLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansCondensed-Light", pathExtension: "ttf")
    /// Resource file `EncodeSansCondensed-Medium.ttf`.
    static let encodeSansCondensedMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansCondensed-Medium", pathExtension: "ttf")
    /// Resource file `EncodeSansCondensed-Regular.ttf`.
    static let encodeSansCondensedRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansCondensed-Regular", pathExtension: "ttf")
    /// Resource file `EncodeSansCondensed-SemiBold.ttf`.
    static let encodeSansCondensedSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansCondensed-SemiBold", pathExtension: "ttf")
    /// Resource file `EncodeSansCondensed-Thin.ttf`.
    static let encodeSansCondensedThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansCondensed-Thin", pathExtension: "ttf")
    /// Resource file `EncodeSansExpanded-Black.ttf`.
    static let encodeSansExpandedBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansExpanded-Black", pathExtension: "ttf")
    /// Resource file `EncodeSansExpanded-Bold.ttf`.
    static let encodeSansExpandedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansExpanded-Bold", pathExtension: "ttf")
    /// Resource file `EncodeSansExpanded-ExtraBold.ttf`.
    static let encodeSansExpandedExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansExpanded-ExtraBold", pathExtension: "ttf")
    /// Resource file `EncodeSansExpanded-ExtraLight.ttf`.
    static let encodeSansExpandedExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansExpanded-ExtraLight", pathExtension: "ttf")
    /// Resource file `EncodeSansExpanded-Light.ttf`.
    static let encodeSansExpandedLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansExpanded-Light", pathExtension: "ttf")
    /// Resource file `EncodeSansExpanded-Medium.ttf`.
    static let encodeSansExpandedMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansExpanded-Medium", pathExtension: "ttf")
    /// Resource file `EncodeSansExpanded-Regular.ttf`.
    static let encodeSansExpandedRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansExpanded-Regular", pathExtension: "ttf")
    /// Resource file `EncodeSansExpanded-SemiBold.ttf`.
    static let encodeSansExpandedSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansExpanded-SemiBold", pathExtension: "ttf")
    /// Resource file `EncodeSansExpanded-Thin.ttf`.
    static let encodeSansExpandedThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansExpanded-Thin", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiCondensed-Black.ttf`.
    static let encodeSansSemiCondensedBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiCondensed-Black", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiCondensed-Bold.ttf`.
    static let encodeSansSemiCondensedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiCondensed-Bold", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiCondensed-ExtraBold.ttf`.
    static let encodeSansSemiCondensedExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiCondensed-ExtraBold", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiCondensed-ExtraLight.ttf`.
    static let encodeSansSemiCondensedExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiCondensed-ExtraLight", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiCondensed-Light.ttf`.
    static let encodeSansSemiCondensedLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiCondensed-Light", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiCondensed-Medium.ttf`.
    static let encodeSansSemiCondensedMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiCondensed-Medium", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiCondensed-Regular.ttf`.
    static let encodeSansSemiCondensedRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiCondensed-Regular", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiCondensed-SemiBold.ttf`.
    static let encodeSansSemiCondensedSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiCondensed-SemiBold", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiCondensed-Thin.ttf`.
    static let encodeSansSemiCondensedThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiCondensed-Thin", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiExpanded-Black.ttf`.
    static let encodeSansSemiExpandedBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiExpanded-Black", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiExpanded-Bold.ttf`.
    static let encodeSansSemiExpandedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiExpanded-Bold", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiExpanded-ExtraBold.ttf`.
    static let encodeSansSemiExpandedExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiExpanded-ExtraBold", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiExpanded-ExtraLight.ttf`.
    static let encodeSansSemiExpandedExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiExpanded-ExtraLight", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiExpanded-Light.ttf`.
    static let encodeSansSemiExpandedLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiExpanded-Light", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiExpanded-Medium.ttf`.
    static let encodeSansSemiExpandedMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiExpanded-Medium", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiExpanded-Regular.ttf`.
    static let encodeSansSemiExpandedRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiExpanded-Regular", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiExpanded-SemiBold.ttf`.
    static let encodeSansSemiExpandedSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiExpanded-SemiBold", pathExtension: "ttf")
    /// Resource file `EncodeSansSemiExpanded-Thin.ttf`.
    static let encodeSansSemiExpandedThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EncodeSansSemiExpanded-Thin", pathExtension: "ttf")
    /// Resource file `Lato-Black.ttf`.
    static let latoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Black", pathExtension: "ttf")
    /// Resource file `Lato-BlackItalic.ttf`.
    static let latoBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-BlackItalic", pathExtension: "ttf")
    /// Resource file `Lato-Bold.ttf`.
    static let latoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Bold", pathExtension: "ttf")
    /// Resource file `Lato-BoldItalic.ttf`.
    static let latoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-BoldItalic", pathExtension: "ttf")
    /// Resource file `Lato-Hairline.ttf`.
    static let latoHairlineTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Hairline", pathExtension: "ttf")
    /// Resource file `Lato-HairlineItalic.ttf`.
    static let latoHairlineItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-HairlineItalic", pathExtension: "ttf")
    /// Resource file `Lato-Italic.ttf`.
    static let latoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Italic", pathExtension: "ttf")
    /// Resource file `Lato-Light.ttf`.
    static let latoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Light", pathExtension: "ttf")
    /// Resource file `Lato-LightItalic.ttf`.
    static let latoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-LightItalic", pathExtension: "ttf")
    /// Resource file `Lato-Regular.ttf`.
    static let latoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Regular", pathExtension: "ttf")
    /// Resource file `MaterialIcons.bundle`.
    static let materialIconsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "MaterialIcons", pathExtension: "bundle")
    /// Resource file `receive_payment.html`.
    static let receive_paymentHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "receive_payment", pathExtension: "html")
    
    /// `bundle.url(forResource: "EncodeSans-Black", withExtension: "ttf")`
    static func encodeSansBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSans-Bold", withExtension: "ttf")`
    static func encodeSansBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSans-ExtraBold", withExtension: "ttf")`
    static func encodeSansExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSans-ExtraLight", withExtension: "ttf")`
    static func encodeSansExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSans-Light", withExtension: "ttf")`
    static func encodeSansLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSans-Medium", withExtension: "ttf")`
    static func encodeSansMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSans-Regular", withExtension: "ttf")`
    static func encodeSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSans-SemiBold", withExtension: "ttf")`
    static func encodeSansSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSans-Thin", withExtension: "ttf")`
    static func encodeSansThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansCondensed-Black", withExtension: "ttf")`
    static func encodeSansCondensedBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansCondensedBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansCondensed-Bold", withExtension: "ttf")`
    static func encodeSansCondensedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansCondensedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansCondensed-ExtraBold", withExtension: "ttf")`
    static func encodeSansCondensedExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansCondensedExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansCondensed-ExtraLight", withExtension: "ttf")`
    static func encodeSansCondensedExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansCondensedExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansCondensed-Light", withExtension: "ttf")`
    static func encodeSansCondensedLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansCondensedLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansCondensed-Medium", withExtension: "ttf")`
    static func encodeSansCondensedMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansCondensedMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansCondensed-Regular", withExtension: "ttf")`
    static func encodeSansCondensedRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansCondensedRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansCondensed-SemiBold", withExtension: "ttf")`
    static func encodeSansCondensedSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansCondensedSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansCondensed-Thin", withExtension: "ttf")`
    static func encodeSansCondensedThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansCondensedThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansExpanded-Black", withExtension: "ttf")`
    static func encodeSansExpandedBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansExpandedBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansExpanded-Bold", withExtension: "ttf")`
    static func encodeSansExpandedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansExpandedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansExpanded-ExtraBold", withExtension: "ttf")`
    static func encodeSansExpandedExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansExpandedExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansExpanded-ExtraLight", withExtension: "ttf")`
    static func encodeSansExpandedExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansExpandedExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansExpanded-Light", withExtension: "ttf")`
    static func encodeSansExpandedLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansExpandedLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansExpanded-Medium", withExtension: "ttf")`
    static func encodeSansExpandedMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansExpandedMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansExpanded-Regular", withExtension: "ttf")`
    static func encodeSansExpandedRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansExpandedRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansExpanded-SemiBold", withExtension: "ttf")`
    static func encodeSansExpandedSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansExpandedSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansExpanded-Thin", withExtension: "ttf")`
    static func encodeSansExpandedThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansExpandedThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiCondensed-Black", withExtension: "ttf")`
    static func encodeSansSemiCondensedBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiCondensedBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiCondensed-Bold", withExtension: "ttf")`
    static func encodeSansSemiCondensedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiCondensedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiCondensed-ExtraBold", withExtension: "ttf")`
    static func encodeSansSemiCondensedExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiCondensedExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiCondensed-ExtraLight", withExtension: "ttf")`
    static func encodeSansSemiCondensedExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiCondensedExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiCondensed-Light", withExtension: "ttf")`
    static func encodeSansSemiCondensedLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiCondensedLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiCondensed-Medium", withExtension: "ttf")`
    static func encodeSansSemiCondensedMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiCondensedMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiCondensed-Regular", withExtension: "ttf")`
    static func encodeSansSemiCondensedRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiCondensedRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiCondensed-SemiBold", withExtension: "ttf")`
    static func encodeSansSemiCondensedSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiCondensedSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiCondensed-Thin", withExtension: "ttf")`
    static func encodeSansSemiCondensedThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiCondensedThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiExpanded-Black", withExtension: "ttf")`
    static func encodeSansSemiExpandedBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiExpandedBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiExpanded-Bold", withExtension: "ttf")`
    static func encodeSansSemiExpandedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiExpandedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiExpanded-ExtraBold", withExtension: "ttf")`
    static func encodeSansSemiExpandedExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiExpandedExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiExpanded-ExtraLight", withExtension: "ttf")`
    static func encodeSansSemiExpandedExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiExpandedExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiExpanded-Light", withExtension: "ttf")`
    static func encodeSansSemiExpandedLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiExpandedLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiExpanded-Medium", withExtension: "ttf")`
    static func encodeSansSemiExpandedMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiExpandedMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiExpanded-Regular", withExtension: "ttf")`
    static func encodeSansSemiExpandedRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiExpandedRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiExpanded-SemiBold", withExtension: "ttf")`
    static func encodeSansSemiExpandedSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiExpandedSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "EncodeSansSemiExpanded-Thin", withExtension: "ttf")`
    static func encodeSansSemiExpandedThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.encodeSansSemiExpandedThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-Black", withExtension: "ttf")`
    static func latoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-BlackItalic", withExtension: "ttf")`
    static func latoBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-Bold", withExtension: "ttf")`
    static func latoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-BoldItalic", withExtension: "ttf")`
    static func latoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-Hairline", withExtension: "ttf")`
    static func latoHairlineTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoHairlineTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-HairlineItalic", withExtension: "ttf")`
    static func latoHairlineItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoHairlineItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-Italic", withExtension: "ttf")`
    static func latoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-Light", withExtension: "ttf")`
    static func latoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-LightItalic", withExtension: "ttf")`
    static func latoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-Regular", withExtension: "ttf")`
    static func latoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "MaterialIcons", withExtension: "bundle")`
    static func materialIconsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.materialIconsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "receive_payment", withExtension: "html")`
    static func receive_paymentHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.receive_paymentHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 55 fonts.
  struct font: Rswift.Validatable {
    /// Font `EncodeSans-Black`.
    static let encodeSansBlack = Rswift.FontResource(fontName: "EncodeSans-Black")
    /// Font `EncodeSans-Bold`.
    static let encodeSansBold = Rswift.FontResource(fontName: "EncodeSans-Bold")
    /// Font `EncodeSans-ExtraBold`.
    static let encodeSansExtraBold = Rswift.FontResource(fontName: "EncodeSans-ExtraBold")
    /// Font `EncodeSans-ExtraLight`.
    static let encodeSansExtraLight = Rswift.FontResource(fontName: "EncodeSans-ExtraLight")
    /// Font `EncodeSans-Light`.
    static let encodeSansLight = Rswift.FontResource(fontName: "EncodeSans-Light")
    /// Font `EncodeSans-Medium`.
    static let encodeSansMedium = Rswift.FontResource(fontName: "EncodeSans-Medium")
    /// Font `EncodeSans-Regular`.
    static let encodeSansRegular = Rswift.FontResource(fontName: "EncodeSans-Regular")
    /// Font `EncodeSans-SemiBold`.
    static let encodeSansSemiBold = Rswift.FontResource(fontName: "EncodeSans-SemiBold")
    /// Font `EncodeSans-Thin`.
    static let encodeSansThin = Rswift.FontResource(fontName: "EncodeSans-Thin")
    /// Font `EncodeSansCondensed-Black`.
    static let encodeSansCondensedBlack = Rswift.FontResource(fontName: "EncodeSansCondensed-Black")
    /// Font `EncodeSansCondensed-Bold`.
    static let encodeSansCondensedBold = Rswift.FontResource(fontName: "EncodeSansCondensed-Bold")
    /// Font `EncodeSansCondensed-ExtraBold`.
    static let encodeSansCondensedExtraBold = Rswift.FontResource(fontName: "EncodeSansCondensed-ExtraBold")
    /// Font `EncodeSansCondensed-ExtraLight`.
    static let encodeSansCondensedExtraLight = Rswift.FontResource(fontName: "EncodeSansCondensed-ExtraLight")
    /// Font `EncodeSansCondensed-Light`.
    static let encodeSansCondensedLight = Rswift.FontResource(fontName: "EncodeSansCondensed-Light")
    /// Font `EncodeSansCondensed-Medium`.
    static let encodeSansCondensedMedium = Rswift.FontResource(fontName: "EncodeSansCondensed-Medium")
    /// Font `EncodeSansCondensed-Regular`.
    static let encodeSansCondensedRegular = Rswift.FontResource(fontName: "EncodeSansCondensed-Regular")
    /// Font `EncodeSansCondensed-SemiBold`.
    static let encodeSansCondensedSemiBold = Rswift.FontResource(fontName: "EncodeSansCondensed-SemiBold")
    /// Font `EncodeSansCondensed-Thin`.
    static let encodeSansCondensedThin = Rswift.FontResource(fontName: "EncodeSansCondensed-Thin")
    /// Font `EncodeSansExpanded-Black`.
    static let encodeSansExpandedBlack = Rswift.FontResource(fontName: "EncodeSansExpanded-Black")
    /// Font `EncodeSansExpanded-Bold`.
    static let encodeSansExpandedBold = Rswift.FontResource(fontName: "EncodeSansExpanded-Bold")
    /// Font `EncodeSansExpanded-ExtraBold`.
    static let encodeSansExpandedExtraBold = Rswift.FontResource(fontName: "EncodeSansExpanded-ExtraBold")
    /// Font `EncodeSansExpanded-ExtraLight`.
    static let encodeSansExpandedExtraLight = Rswift.FontResource(fontName: "EncodeSansExpanded-ExtraLight")
    /// Font `EncodeSansExpanded-Light`.
    static let encodeSansExpandedLight = Rswift.FontResource(fontName: "EncodeSansExpanded-Light")
    /// Font `EncodeSansExpanded-Medium`.
    static let encodeSansExpandedMedium = Rswift.FontResource(fontName: "EncodeSansExpanded-Medium")
    /// Font `EncodeSansExpanded-Regular`.
    static let encodeSansExpandedRegular = Rswift.FontResource(fontName: "EncodeSansExpanded-Regular")
    /// Font `EncodeSansExpanded-SemiBold`.
    static let encodeSansExpandedSemiBold = Rswift.FontResource(fontName: "EncodeSansExpanded-SemiBold")
    /// Font `EncodeSansExpanded-Thin`.
    static let encodeSansExpandedThin = Rswift.FontResource(fontName: "EncodeSansExpanded-Thin")
    /// Font `EncodeSansSemiCondensed-Black`.
    static let encodeSansSemiCondensedBlack = Rswift.FontResource(fontName: "EncodeSansSemiCondensed-Black")
    /// Font `EncodeSansSemiCondensed-Bold`.
    static let encodeSansSemiCondensedBold = Rswift.FontResource(fontName: "EncodeSansSemiCondensed-Bold")
    /// Font `EncodeSansSemiCondensed-ExtraBold`.
    static let encodeSansSemiCondensedExtraBold = Rswift.FontResource(fontName: "EncodeSansSemiCondensed-ExtraBold")
    /// Font `EncodeSansSemiCondensed-ExtraLight`.
    static let encodeSansSemiCondensedExtraLight = Rswift.FontResource(fontName: "EncodeSansSemiCondensed-ExtraLight")
    /// Font `EncodeSansSemiCondensed-Light`.
    static let encodeSansSemiCondensedLight = Rswift.FontResource(fontName: "EncodeSansSemiCondensed-Light")
    /// Font `EncodeSansSemiCondensed-Medium`.
    static let encodeSansSemiCondensedMedium = Rswift.FontResource(fontName: "EncodeSansSemiCondensed-Medium")
    /// Font `EncodeSansSemiCondensed-Regular`.
    static let encodeSansSemiCondensedRegular = Rswift.FontResource(fontName: "EncodeSansSemiCondensed-Regular")
    /// Font `EncodeSansSemiCondensed-SemiBold`.
    static let encodeSansSemiCondensedSemiBold = Rswift.FontResource(fontName: "EncodeSansSemiCondensed-SemiBold")
    /// Font `EncodeSansSemiCondensed-Thin`.
    static let encodeSansSemiCondensedThin = Rswift.FontResource(fontName: "EncodeSansSemiCondensed-Thin")
    /// Font `EncodeSansSemiExpanded-Black`.
    static let encodeSansSemiExpandedBlack = Rswift.FontResource(fontName: "EncodeSansSemiExpanded-Black")
    /// Font `EncodeSansSemiExpanded-Bold`.
    static let encodeSansSemiExpandedBold = Rswift.FontResource(fontName: "EncodeSansSemiExpanded-Bold")
    /// Font `EncodeSansSemiExpanded-ExtraBold`.
    static let encodeSansSemiExpandedExtraBold = Rswift.FontResource(fontName: "EncodeSansSemiExpanded-ExtraBold")
    /// Font `EncodeSansSemiExpanded-ExtraLight`.
    static let encodeSansSemiExpandedExtraLight = Rswift.FontResource(fontName: "EncodeSansSemiExpanded-ExtraLight")
    /// Font `EncodeSansSemiExpanded-Light`.
    static let encodeSansSemiExpandedLight = Rswift.FontResource(fontName: "EncodeSansSemiExpanded-Light")
    /// Font `EncodeSansSemiExpanded-Medium`.
    static let encodeSansSemiExpandedMedium = Rswift.FontResource(fontName: "EncodeSansSemiExpanded-Medium")
    /// Font `EncodeSansSemiExpanded-Regular`.
    static let encodeSansSemiExpandedRegular = Rswift.FontResource(fontName: "EncodeSansSemiExpanded-Regular")
    /// Font `EncodeSansSemiExpanded-SemiBold`.
    static let encodeSansSemiExpandedSemiBold = Rswift.FontResource(fontName: "EncodeSansSemiExpanded-SemiBold")
    /// Font `EncodeSansSemiExpanded-Thin`.
    static let encodeSansSemiExpandedThin = Rswift.FontResource(fontName: "EncodeSansSemiExpanded-Thin")
    /// Font `Lato-BlackItalic`.
    static let latoBlackItalic = Rswift.FontResource(fontName: "Lato-BlackItalic")
    /// Font `Lato-Black`.
    static let latoBlack = Rswift.FontResource(fontName: "Lato-Black")
    /// Font `Lato-BoldItalic`.
    static let latoBoldItalic = Rswift.FontResource(fontName: "Lato-BoldItalic")
    /// Font `Lato-Bold`.
    static let latoBold = Rswift.FontResource(fontName: "Lato-Bold")
    /// Font `Lato-HairlineItalic`.
    static let latoHairlineItalic = Rswift.FontResource(fontName: "Lato-HairlineItalic")
    /// Font `Lato-Hairline`.
    static let latoHairline = Rswift.FontResource(fontName: "Lato-Hairline")
    /// Font `Lato-Italic`.
    static let latoItalic = Rswift.FontResource(fontName: "Lato-Italic")
    /// Font `Lato-LightItalic`.
    static let latoLightItalic = Rswift.FontResource(fontName: "Lato-LightItalic")
    /// Font `Lato-Light`.
    static let latoLight = Rswift.FontResource(fontName: "Lato-Light")
    /// Font `Lato-Regular`.
    static let latoRegular = Rswift.FontResource(fontName: "Lato-Regular")
    
    /// `UIFont(name: "EncodeSans-Black", size: ...)`
    static func encodeSansBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansBlack, size: size)
    }
    
    /// `UIFont(name: "EncodeSans-Bold", size: ...)`
    static func encodeSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSans-ExtraBold", size: ...)`
    static func encodeSansExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansExtraBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSans-ExtraLight", size: ...)`
    static func encodeSansExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansExtraLight, size: size)
    }
    
    /// `UIFont(name: "EncodeSans-Light", size: ...)`
    static func encodeSansLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansLight, size: size)
    }
    
    /// `UIFont(name: "EncodeSans-Medium", size: ...)`
    static func encodeSansMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansMedium, size: size)
    }
    
    /// `UIFont(name: "EncodeSans-Regular", size: ...)`
    static func encodeSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansRegular, size: size)
    }
    
    /// `UIFont(name: "EncodeSans-SemiBold", size: ...)`
    static func encodeSansSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSans-Thin", size: ...)`
    static func encodeSansThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansThin, size: size)
    }
    
    /// `UIFont(name: "EncodeSansCondensed-Black", size: ...)`
    static func encodeSansCondensedBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansCondensedBlack, size: size)
    }
    
    /// `UIFont(name: "EncodeSansCondensed-Bold", size: ...)`
    static func encodeSansCondensedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansCondensedBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansCondensed-ExtraBold", size: ...)`
    static func encodeSansCondensedExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansCondensedExtraBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansCondensed-ExtraLight", size: ...)`
    static func encodeSansCondensedExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansCondensedExtraLight, size: size)
    }
    
    /// `UIFont(name: "EncodeSansCondensed-Light", size: ...)`
    static func encodeSansCondensedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansCondensedLight, size: size)
    }
    
    /// `UIFont(name: "EncodeSansCondensed-Medium", size: ...)`
    static func encodeSansCondensedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansCondensedMedium, size: size)
    }
    
    /// `UIFont(name: "EncodeSansCondensed-Regular", size: ...)`
    static func encodeSansCondensedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansCondensedRegular, size: size)
    }
    
    /// `UIFont(name: "EncodeSansCondensed-SemiBold", size: ...)`
    static func encodeSansCondensedSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansCondensedSemiBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansCondensed-Thin", size: ...)`
    static func encodeSansCondensedThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansCondensedThin, size: size)
    }
    
    /// `UIFont(name: "EncodeSansExpanded-Black", size: ...)`
    static func encodeSansExpandedBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansExpandedBlack, size: size)
    }
    
    /// `UIFont(name: "EncodeSansExpanded-Bold", size: ...)`
    static func encodeSansExpandedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansExpandedBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansExpanded-ExtraBold", size: ...)`
    static func encodeSansExpandedExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansExpandedExtraBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansExpanded-ExtraLight", size: ...)`
    static func encodeSansExpandedExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansExpandedExtraLight, size: size)
    }
    
    /// `UIFont(name: "EncodeSansExpanded-Light", size: ...)`
    static func encodeSansExpandedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansExpandedLight, size: size)
    }
    
    /// `UIFont(name: "EncodeSansExpanded-Medium", size: ...)`
    static func encodeSansExpandedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansExpandedMedium, size: size)
    }
    
    /// `UIFont(name: "EncodeSansExpanded-Regular", size: ...)`
    static func encodeSansExpandedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansExpandedRegular, size: size)
    }
    
    /// `UIFont(name: "EncodeSansExpanded-SemiBold", size: ...)`
    static func encodeSansExpandedSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansExpandedSemiBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansExpanded-Thin", size: ...)`
    static func encodeSansExpandedThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansExpandedThin, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiCondensed-Black", size: ...)`
    static func encodeSansSemiCondensedBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiCondensedBlack, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiCondensed-Bold", size: ...)`
    static func encodeSansSemiCondensedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiCondensedBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiCondensed-ExtraBold", size: ...)`
    static func encodeSansSemiCondensedExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiCondensedExtraBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiCondensed-ExtraLight", size: ...)`
    static func encodeSansSemiCondensedExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiCondensedExtraLight, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiCondensed-Light", size: ...)`
    static func encodeSansSemiCondensedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiCondensedLight, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiCondensed-Medium", size: ...)`
    static func encodeSansSemiCondensedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiCondensedMedium, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiCondensed-Regular", size: ...)`
    static func encodeSansSemiCondensedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiCondensedRegular, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiCondensed-SemiBold", size: ...)`
    static func encodeSansSemiCondensedSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiCondensedSemiBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiCondensed-Thin", size: ...)`
    static func encodeSansSemiCondensedThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiCondensedThin, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiExpanded-Black", size: ...)`
    static func encodeSansSemiExpandedBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiExpandedBlack, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiExpanded-Bold", size: ...)`
    static func encodeSansSemiExpandedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiExpandedBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiExpanded-ExtraBold", size: ...)`
    static func encodeSansSemiExpandedExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiExpandedExtraBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiExpanded-ExtraLight", size: ...)`
    static func encodeSansSemiExpandedExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiExpandedExtraLight, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiExpanded-Light", size: ...)`
    static func encodeSansSemiExpandedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiExpandedLight, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiExpanded-Medium", size: ...)`
    static func encodeSansSemiExpandedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiExpandedMedium, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiExpanded-Regular", size: ...)`
    static func encodeSansSemiExpandedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiExpandedRegular, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiExpanded-SemiBold", size: ...)`
    static func encodeSansSemiExpandedSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiExpandedSemiBold, size: size)
    }
    
    /// `UIFont(name: "EncodeSansSemiExpanded-Thin", size: ...)`
    static func encodeSansSemiExpandedThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: encodeSansSemiExpandedThin, size: size)
    }
    
    /// `UIFont(name: "Lato-Black", size: ...)`
    static func latoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBlack, size: size)
    }
    
    /// `UIFont(name: "Lato-BlackItalic", size: ...)`
    static func latoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBlackItalic, size: size)
    }
    
    /// `UIFont(name: "Lato-Bold", size: ...)`
    static func latoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBold, size: size)
    }
    
    /// `UIFont(name: "Lato-BoldItalic", size: ...)`
    static func latoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Lato-Hairline", size: ...)`
    static func latoHairline(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoHairline, size: size)
    }
    
    /// `UIFont(name: "Lato-HairlineItalic", size: ...)`
    static func latoHairlineItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoHairlineItalic, size: size)
    }
    
    /// `UIFont(name: "Lato-Italic", size: ...)`
    static func latoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoItalic, size: size)
    }
    
    /// `UIFont(name: "Lato-Light", size: ...)`
    static func latoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoLight, size: size)
    }
    
    /// `UIFont(name: "Lato-LightItalic", size: ...)`
    static func latoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoLightItalic, size: size)
    }
    
    /// `UIFont(name: "Lato-Regular", size: ...)`
    static func latoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.encodeSansThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSans-Thin' could not be loaded, is 'EncodeSans-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansCondensedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansCondensed-Bold' could not be loaded, is 'EncodeSansCondensed-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSans-ExtraBold' could not be loaded, is 'EncodeSans-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansExpandedExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansExpanded-ExtraBold' could not be loaded, is 'EncodeSansExpanded-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiExpandedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiExpanded-Bold' could not be loaded, is 'EncodeSansSemiExpanded-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoHairlineItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-HairlineItalic' could not be loaded, is 'Lato-HairlineItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiExpandedThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiExpanded-Thin' could not be loaded, is 'EncodeSansSemiExpanded-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSans-SemiBold' could not be loaded, is 'EncodeSans-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiCondensedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiCondensed-Medium' could not be loaded, is 'EncodeSansSemiCondensed-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansCondensedThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansCondensed-Thin' could not be loaded, is 'EncodeSansCondensed-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiExpandedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiExpanded-Regular' could not be loaded, is 'EncodeSansSemiExpanded-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-BlackItalic' could not be loaded, is 'Lato-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiCondensedExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiCondensed-ExtraLight' could not be loaded, is 'EncodeSansSemiCondensed-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansCondensedBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansCondensed-Black' could not be loaded, is 'EncodeSansCondensed-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiCondensedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiCondensed-Bold' could not be loaded, is 'EncodeSansSemiCondensed-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Regular' could not be loaded, is 'Lato-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansCondensedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansCondensed-Regular' could not be loaded, is 'EncodeSansCondensed-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansExpandedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansExpanded-Regular' could not be loaded, is 'EncodeSansExpanded-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Bold' could not be loaded, is 'Lato-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansExpandedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansExpanded-Light' could not be loaded, is 'EncodeSansExpanded-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansCondensedExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansCondensed-ExtraBold' could not be loaded, is 'EncodeSansCondensed-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSans-Bold' could not be loaded, is 'EncodeSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-LightItalic' could not be loaded, is 'Lato-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiExpandedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiExpanded-Light' could not be loaded, is 'EncodeSansSemiExpanded-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansCondensedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansCondensed-Light' could not be loaded, is 'EncodeSansCondensed-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiCondensedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiCondensed-Light' could not be loaded, is 'EncodeSansSemiCondensed-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiExpandedExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiExpanded-ExtraLight' could not be loaded, is 'EncodeSansSemiExpanded-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansExpandedBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansExpanded-Black' could not be loaded, is 'EncodeSansExpanded-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansCondensedExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansCondensed-ExtraLight' could not be loaded, is 'EncodeSansCondensed-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansCondensedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansCondensed-Medium' could not be loaded, is 'EncodeSansCondensed-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiExpandedSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiExpanded-SemiBold' could not be loaded, is 'EncodeSansSemiExpanded-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSans-ExtraLight' could not be loaded, is 'EncodeSans-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiExpandedExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiExpanded-ExtraBold' could not be loaded, is 'EncodeSansSemiExpanded-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansExpandedThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansExpanded-Thin' could not be loaded, is 'EncodeSansExpanded-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiExpandedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiExpanded-Medium' could not be loaded, is 'EncodeSansSemiExpanded-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSans-Regular' could not be loaded, is 'EncodeSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Black' could not be loaded, is 'Lato-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Light' could not be loaded, is 'Lato-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiCondensedThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiCondensed-Thin' could not be loaded, is 'EncodeSansSemiCondensed-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiExpandedBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiExpanded-Black' could not be loaded, is 'EncodeSansSemiExpanded-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansExpandedSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansExpanded-SemiBold' could not be loaded, is 'EncodeSansExpanded-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansCondensedSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansCondensed-SemiBold' could not be loaded, is 'EncodeSansCondensed-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiCondensedSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiCondensed-SemiBold' could not be loaded, is 'EncodeSansSemiCondensed-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoHairline(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Hairline' could not be loaded, is 'Lato-Hairline.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-BoldItalic' could not be loaded, is 'Lato-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansExpandedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansExpanded-Medium' could not be loaded, is 'EncodeSansExpanded-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiCondensedExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiCondensed-ExtraBold' could not be loaded, is 'EncodeSansSemiCondensed-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSans-Medium' could not be loaded, is 'EncodeSans-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSans-Light' could not be loaded, is 'EncodeSans-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSans-Black' could not be loaded, is 'EncodeSans-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Italic' could not be loaded, is 'Lato-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansExpandedExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansExpanded-ExtraLight' could not be loaded, is 'EncodeSansExpanded-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansExpandedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansExpanded-Bold' could not be loaded, is 'EncodeSansExpanded-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiCondensedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiCondensed-Regular' could not be loaded, is 'EncodeSansSemiCondensed-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.encodeSansSemiCondensedBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EncodeSansSemiCondensed-Black' could not be loaded, is 'EncodeSansSemiCondensed-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 53 images.
  struct image {
    /// Image `FaceIcon`.
    static let faceIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FaceIcon")
    /// Image `MenuColor`.
    static let menuColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "MenuColor")
    /// Image `TouchIcon`.
    static let touchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "TouchIcon")
    /// Image `arrow-left`.
    static let arrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-left")
    /// Image `basics`.
    static let basics = Rswift.ImageResource(bundle: R.hostingBundle, name: "basics")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `compose`.
    static let compose = Rswift.ImageResource(bundle: R.hostingBundle, name: "compose")
    /// Image `contact_add`.
    static let contact_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "contact_add")
    /// Image `copy`.
    static let copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "copy")
    /// Image `currencies`.
    static let currencies = Rswift.ImageResource(bundle: R.hostingBundle, name: "currencies")
    /// Image `face_recognition`.
    static let face_recognition = Rswift.ImageResource(bundle: R.hostingBundle, name: "face_recognition")
    /// Image `faq`.
    static let faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq")
    /// Image `fingerprint`.
    static let fingerprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "fingerprint")
    /// Image `found_account`.
    static let found_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "found_account")
    /// Image `gear`.
    static let gear = Rswift.ImageResource(bundle: R.hostingBundle, name: "gear")
    /// Image `header_background`.
    static let header_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_background")
    /// Image `help_card`.
    static let help_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "help_card")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `ico2`.
    static let ico2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico2")
    /// Image `ico`.
    static let ico = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico")
    /// Image `icon-menu-active`.
    static let iconMenuActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-menu-active")
    /// Image `icon-menu`.
    static let iconMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-menu")
    /// Image `inbox`.
    static let inbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "inbox")
    /// Image `link`.
    static let link = Rswift.ImageResource(bundle: R.hostingBundle, name: "link")
    /// Image `lock`.
    static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `lost_2fa`.
    static let lost_2fa = Rswift.ImageResource(bundle: R.hostingBundle, name: "lost_2fa")
    /// Image `moreActive`.
    static let moreActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "moreActive")
    /// Image `more`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "more")
    /// Image `my_orders`.
    static let my_orders = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_orders")
    /// Image `nav_background`.
    static let nav_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_background")
    /// Image `pencil`.
    static let pencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "pencil")
    /// Image `puzzle-piece`.
    static let puzzlePiece = Rswift.ImageResource(bundle: R.hostingBundle, name: "puzzle-piece")
    /// Image `qr_placeholder`.
    static let qr_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr_placeholder")
    /// Image `question`.
    static let question = Rswift.ImageResource(bundle: R.hostingBundle, name: "question")
    /// Image `receiveActive`.
    static let receiveActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "receiveActive")
    /// Image `receive`.
    static let receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "receive")
    /// Image `rocket`.
    static let rocket = Rswift.ImageResource(bundle: R.hostingBundle, name: "rocket")
    /// Image `security`.
    static let security = Rswift.ImageResource(bundle: R.hostingBundle, name: "security")
    /// Image `sendActive`.
    static let sendActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendActive")
    /// Image `send`.
    static let send = Rswift.ImageResource(bundle: R.hostingBundle, name: "send")
    /// Image `signIn`.
    static let signIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "signIn")
    /// Image `signOut`.
    static let signOut = Rswift.ImageResource(bundle: R.hostingBundle, name: "signOut")
    /// Image `soneso_background`.
    static let soneso_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "soneso_background")
    /// Image `soneso`.
    static let soneso = Rswift.ImageResource(bundle: R.hostingBundle, name: "soneso")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `stellar`.
    static let stellar = Rswift.ImageResource(bundle: R.hostingBundle, name: "stellar")
    /// Image `transactions`.
    static let transactions = Rswift.ImageResource(bundle: R.hostingBundle, name: "transactions")
    /// Image `user_add`.
    static let user_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_add")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `users`.
    static let users = Rswift.ImageResource(bundle: R.hostingBundle, name: "users")
    /// Image `wallets2`.
    static let wallets2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallets2")
    /// Image `wallets`.
    static let wallets = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallets")
    
    /// `UIImage(named: "FaceIcon", bundle: ..., traitCollection: ...)`
    static func faceIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faceIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MenuColor", bundle: ..., traitCollection: ...)`
    static func menuColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TouchIcon", bundle: ..., traitCollection: ...)`
    static func touchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touchIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow-left", bundle: ..., traitCollection: ...)`
    static func arrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "basics", bundle: ..., traitCollection: ...)`
    static func basics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.basics, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "compose", bundle: ..., traitCollection: ...)`
    static func compose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.compose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contact_add", bundle: ..., traitCollection: ...)`
    static func contact_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contact_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "copy", bundle: ..., traitCollection: ...)`
    static func copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "currencies", bundle: ..., traitCollection: ...)`
    static func currencies(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currencies, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "face_recognition", bundle: ..., traitCollection: ...)`
    static func face_recognition(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face_recognition, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "faq", bundle: ..., traitCollection: ...)`
    static func faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fingerprint", bundle: ..., traitCollection: ...)`
    static func fingerprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fingerprint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "found_account", bundle: ..., traitCollection: ...)`
    static func found_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.found_account, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gear", bundle: ..., traitCollection: ...)`
    static func gear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gear, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "header_background", bundle: ..., traitCollection: ...)`
    static func header_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "help_card", bundle: ..., traitCollection: ...)`
    static func help_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help_card, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico", bundle: ..., traitCollection: ...)`
    static func ico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico2", bundle: ..., traitCollection: ...)`
    static func ico2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-menu", bundle: ..., traitCollection: ...)`
    static func iconMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-menu-active", bundle: ..., traitCollection: ...)`
    static func iconMenuActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMenuActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "inbox", bundle: ..., traitCollection: ...)`
    static func inbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inbox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "link", bundle: ..., traitCollection: ...)`
    static func link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.link, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock", bundle: ..., traitCollection: ...)`
    static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lost_2fa", bundle: ..., traitCollection: ...)`
    static func lost_2fa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lost_2fa, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "moreActive", bundle: ..., traitCollection: ...)`
    static func moreActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_orders", bundle: ..., traitCollection: ...)`
    static func my_orders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_orders, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_background", bundle: ..., traitCollection: ...)`
    static func nav_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pencil", bundle: ..., traitCollection: ...)`
    static func pencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pencil, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "puzzle-piece", bundle: ..., traitCollection: ...)`
    static func puzzlePiece(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.puzzlePiece, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qr_placeholder", bundle: ..., traitCollection: ...)`
    static func qr_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "question", bundle: ..., traitCollection: ...)`
    static func question(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.question, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "receive", bundle: ..., traitCollection: ...)`
    static func receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "receiveActive", bundle: ..., traitCollection: ...)`
    static func receiveActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.receiveActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rocket", bundle: ..., traitCollection: ...)`
    static func rocket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rocket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "security", bundle: ..., traitCollection: ...)`
    static func security(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.security, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "send", bundle: ..., traitCollection: ...)`
    static func send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sendActive", bundle: ..., traitCollection: ...)`
    static func sendActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "signIn", bundle: ..., traitCollection: ...)`
    static func signIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signIn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "signOut", bundle: ..., traitCollection: ...)`
    static func signOut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signOut, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "soneso", bundle: ..., traitCollection: ...)`
    static func soneso(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.soneso, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "soneso_background", bundle: ..., traitCollection: ...)`
    static func soneso_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.soneso_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "stellar", bundle: ..., traitCollection: ...)`
    static func stellar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stellar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transactions", bundle: ..., traitCollection: ...)`
    static func transactions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transactions, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_add", bundle: ..., traitCollection: ...)`
    static func user_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "users", bundle: ..., traitCollection: ...)`
    static func users(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.users, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallets", bundle: ..., traitCollection: ...)`
    static func wallets(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallets, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallets2", bundle: ..., traitCollection: ...)`
    static func wallets2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallets2, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 37 nibs.
  struct nib {
    /// Nib `AccountCurrenciesViewController`.
    static let accountCurrenciesViewController = _R.nib._AccountCurrenciesViewController()
    /// Nib `AccountDetailsViewController`.
    static let accountDetailsViewController = _R.nib._AccountDetailsViewController()
    /// Nib `AddCurrencyViewController`.
    static let addCurrencyViewController = _R.nib._AddCurrencyViewController()
    /// Nib `CurrencyFeeInfoViewController`.
    static let currencyFeeInfoViewController = _R.nib._CurrencyFeeInfoViewController()
    /// Nib `CurrencyView`.
    static let currencyView = _R.nib._CurrencyView()
    /// Nib `FundTestNetWalletViewController`.
    static let fundTestNetWalletViewController = _R.nib._FundTestNetWalletViewController()
    /// Nib `FundWalletViewController`.
    static let fundWalletViewController = _R.nib._FundWalletViewController()
    /// Nib `HomeFundedWalletHeaderView`.
    static let homeFundedWalletHeaderView = _R.nib._HomeFundedWalletHeaderView()
    /// Nib `HomeUnfundedWalletHeaderView`.
    static let homeUnfundedWalletHeaderView = _R.nib._HomeUnfundedWalletHeaderView()
    /// Nib `IconView`.
    static let iconView = _R.nib._IconView()
    /// Nib `KnownCurrenciesTableViewCell`.
    static let knownCurrenciesTableViewCell = _R.nib._KnownCurrenciesTableViewCell()
    /// Nib `KnownCurrenciesTableViewController`.
    static let knownCurrenciesTableViewController = _R.nib._KnownCurrenciesTableViewController()
    /// Nib `KnownInflationDestinationDetailsViewController`.
    static let knownInflationDestinationDetailsViewController = _R.nib._KnownInflationDestinationDetailsViewController()
    /// Nib `KnownInflationDestinationsTableViewCell`.
    static let knownInflationDestinationsTableViewCell = _R.nib._KnownInflationDestinationsTableViewCell()
    /// Nib `KnownInflationDestinationsViewController`.
    static let knownInflationDestinationsViewController = _R.nib._KnownInflationDestinationsViewController()
    /// Nib `LoadTransactionsHistoryViewController`.
    static let loadTransactionsHistoryViewController = _R.nib._LoadTransactionsHistoryViewController()
    /// Nib `LockedView`.
    static let lockedView = _R.nib._LockedView()
    /// Nib `NativeCurrencyFeeInfoViewController`.
    static let nativeCurrencyFeeInfoViewController = _R.nib._NativeCurrencyFeeInfoViewController()
    /// Nib `NoMultiSigSupportViewController`.
    static let noMultiSigSupportViewController = _R.nib._NoMultiSigSupportViewController()
    /// Nib `PasswordView`.
    static let passwordView = _R.nib._PasswordView()
    /// Nib `ProvideCurrencyDataViewController`.
    static let provideCurrencyDataViewController = _R.nib._ProvideCurrencyDataViewController()
    /// Nib `ProvideInflationDestinationViewController`.
    static let provideInflationDestinationViewController = _R.nib._ProvideInflationDestinationViewController()
    /// Nib `ReceivePaymentCardViewController`.
    static let receivePaymentCardViewController = _R.nib._ReceivePaymentCardViewController()
    /// Nib `ReceivePaymentPrintView`.
    static let receivePaymentPrintView = _R.nib._ReceivePaymentPrintView()
    /// Nib `RemoveCurrencyViewController`.
    static let removeCurrencyViewController = _R.nib._RemoveCurrencyViewController()
    /// Nib `SendViewController`.
    static let sendViewController = _R.nib._SendViewController()
    /// Nib `SetInflationDestinationViewController`.
    static let setInflationDestinationViewController = _R.nib._SetInflationDestinationViewController()
    /// Nib `TitleView`.
    static let titleView = _R.nib._TitleView()
    /// Nib `TransactionHistoryDetailsViewController`.
    static let transactionHistoryDetailsViewController = _R.nib._TransactionHistoryDetailsViewController()
    /// Nib `TransactionHistoryTableViewController`.
    static let transactionHistoryTableViewController = _R.nib._TransactionHistoryTableViewController()
    /// Nib `TransactionResultPrintView`.
    static let transactionResultPrintView = _R.nib._TransactionResultPrintView()
    /// Nib `TransactionResultViewController`.
    static let transactionResultViewController = _R.nib._TransactionResultViewController()
    /// Nib `TransactionTableViewCell`.
    static let transactionTableViewCell = _R.nib._TransactionTableViewCell()
    /// Nib `UnfundedWalletCardContentView`.
    static let unfundedWalletCardContentView = _R.nib._UnfundedWalletCardContentView()
    /// Nib `WalletCardContentView`.
    static let walletCardContentView = _R.nib._WalletCardContentView()
    /// Nib `WalletCardInfoViewController`.
    static let walletCardInfoViewController = _R.nib._WalletCardInfoViewController()
    /// Nib `WalletDetailsViewController`.
    static let walletDetailsViewController = _R.nib._WalletDetailsViewController()
    
    /// `UINib(name: "AccountCurrenciesViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountCurrenciesViewController) instead")
    static func accountCurrenciesViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountCurrenciesViewController)
    }
    
    /// `UINib(name: "AccountDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountDetailsViewController) instead")
    static func accountDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountDetailsViewController)
    }
    
    /// `UINib(name: "AddCurrencyViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addCurrencyViewController) instead")
    static func addCurrencyViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addCurrencyViewController)
    }
    
    /// `UINib(name: "CurrencyFeeInfoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currencyFeeInfoViewController) instead")
    static func currencyFeeInfoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currencyFeeInfoViewController)
    }
    
    /// `UINib(name: "CurrencyView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currencyView) instead")
    static func currencyView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currencyView)
    }
    
    /// `UINib(name: "FundTestNetWalletViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fundTestNetWalletViewController) instead")
    static func fundTestNetWalletViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fundTestNetWalletViewController)
    }
    
    /// `UINib(name: "FundWalletViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fundWalletViewController) instead")
    static func fundWalletViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fundWalletViewController)
    }
    
    /// `UINib(name: "HomeFundedWalletHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeFundedWalletHeaderView) instead")
    static func homeFundedWalletHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeFundedWalletHeaderView)
    }
    
    /// `UINib(name: "HomeUnfundedWalletHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeUnfundedWalletHeaderView) instead")
    static func homeUnfundedWalletHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeUnfundedWalletHeaderView)
    }
    
    /// `UINib(name: "IconView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.iconView) instead")
    static func iconView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iconView)
    }
    
    /// `UINib(name: "KnownCurrenciesTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.knownCurrenciesTableViewCell) instead")
    static func knownCurrenciesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.knownCurrenciesTableViewCell)
    }
    
    /// `UINib(name: "KnownCurrenciesTableViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.knownCurrenciesTableViewController) instead")
    static func knownCurrenciesTableViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.knownCurrenciesTableViewController)
    }
    
    /// `UINib(name: "KnownInflationDestinationDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.knownInflationDestinationDetailsViewController) instead")
    static func knownInflationDestinationDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.knownInflationDestinationDetailsViewController)
    }
    
    /// `UINib(name: "KnownInflationDestinationsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.knownInflationDestinationsTableViewCell) instead")
    static func knownInflationDestinationsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.knownInflationDestinationsTableViewCell)
    }
    
    /// `UINib(name: "KnownInflationDestinationsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.knownInflationDestinationsViewController) instead")
    static func knownInflationDestinationsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.knownInflationDestinationsViewController)
    }
    
    /// `UINib(name: "LoadTransactionsHistoryViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadTransactionsHistoryViewController) instead")
    static func loadTransactionsHistoryViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadTransactionsHistoryViewController)
    }
    
    /// `UINib(name: "LockedView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.lockedView) instead")
    static func lockedView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lockedView)
    }
    
    /// `UINib(name: "NativeCurrencyFeeInfoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.nativeCurrencyFeeInfoViewController) instead")
    static func nativeCurrencyFeeInfoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nativeCurrencyFeeInfoViewController)
    }
    
    /// `UINib(name: "NoMultiSigSupportViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.noMultiSigSupportViewController) instead")
    static func noMultiSigSupportViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noMultiSigSupportViewController)
    }
    
    /// `UINib(name: "PasswordView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.passwordView) instead")
    static func passwordView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.passwordView)
    }
    
    /// `UINib(name: "ProvideCurrencyDataViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.provideCurrencyDataViewController) instead")
    static func provideCurrencyDataViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.provideCurrencyDataViewController)
    }
    
    /// `UINib(name: "ProvideInflationDestinationViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.provideInflationDestinationViewController) instead")
    static func provideInflationDestinationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.provideInflationDestinationViewController)
    }
    
    /// `UINib(name: "ReceivePaymentCardViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.receivePaymentCardViewController) instead")
    static func receivePaymentCardViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.receivePaymentCardViewController)
    }
    
    /// `UINib(name: "ReceivePaymentPrintView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.receivePaymentPrintView) instead")
    static func receivePaymentPrintView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.receivePaymentPrintView)
    }
    
    /// `UINib(name: "RemoveCurrencyViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.removeCurrencyViewController) instead")
    static func removeCurrencyViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.removeCurrencyViewController)
    }
    
    /// `UINib(name: "SendViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sendViewController) instead")
    static func sendViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sendViewController)
    }
    
    /// `UINib(name: "SetInflationDestinationViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.setInflationDestinationViewController) instead")
    static func setInflationDestinationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.setInflationDestinationViewController)
    }
    
    /// `UINib(name: "TitleView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.titleView) instead")
    static func titleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleView)
    }
    
    /// `UINib(name: "TransactionHistoryDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionHistoryDetailsViewController) instead")
    static func transactionHistoryDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionHistoryDetailsViewController)
    }
    
    /// `UINib(name: "TransactionHistoryTableViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionHistoryTableViewController) instead")
    static func transactionHistoryTableViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionHistoryTableViewController)
    }
    
    /// `UINib(name: "TransactionResultPrintView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionResultPrintView) instead")
    static func transactionResultPrintView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionResultPrintView)
    }
    
    /// `UINib(name: "TransactionResultViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionResultViewController) instead")
    static func transactionResultViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionResultViewController)
    }
    
    /// `UINib(name: "TransactionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionTableViewCell) instead")
    static func transactionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionTableViewCell)
    }
    
    /// `UINib(name: "UnfundedWalletCardContentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.unfundedWalletCardContentView) instead")
    static func unfundedWalletCardContentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.unfundedWalletCardContentView)
    }
    
    /// `UINib(name: "WalletCardContentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletCardContentView) instead")
    static func walletCardContentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletCardContentView)
    }
    
    /// `UINib(name: "WalletCardInfoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletCardInfoViewController) instead")
    static func walletCardInfoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletCardInfoViewController)
    }
    
    /// `UINib(name: "WalletDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletDetailsViewController) instead")
    static func walletDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletDetailsViewController)
    }
    
    static func accountCurrenciesViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountCurrenciesViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func accountDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func addCurrencyViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addCurrencyViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func currencyFeeInfoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.currencyFeeInfoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func currencyView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyView? {
      return R.nib.currencyView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyView
    }
    
    static func fundTestNetWalletViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.fundTestNetWalletViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func fundWalletViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.fundWalletViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func homeFundedWalletHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeFundedWalletHeaderView? {
      return R.nib.homeFundedWalletHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeFundedWalletHeaderView
    }
    
    static func homeUnfundedWalletHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeUnfundedWalletHeaderView? {
      return R.nib.homeUnfundedWalletHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeUnfundedWalletHeaderView
    }
    
    static func iconView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.iconView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func knownCurrenciesTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> KnownCurrenciesTableViewCell? {
      return R.nib.knownCurrenciesTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? KnownCurrenciesTableViewCell
    }
    
    static func knownCurrenciesTableViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.knownCurrenciesTableViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func knownInflationDestinationDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.knownInflationDestinationDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func knownInflationDestinationsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> KnownInflationDestinationsTableViewCell? {
      return R.nib.knownInflationDestinationsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? KnownInflationDestinationsTableViewCell
    }
    
    static func knownInflationDestinationsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.knownInflationDestinationsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func loadTransactionsHistoryViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loadTransactionsHistoryViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func lockedView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.lockedView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func nativeCurrencyFeeInfoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.nativeCurrencyFeeInfoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func noMultiSigSupportViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.noMultiSigSupportViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func passwordView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PasswordView? {
      return R.nib.passwordView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasswordView
    }
    
    static func provideCurrencyDataViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.provideCurrencyDataViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func provideInflationDestinationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.provideInflationDestinationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func receivePaymentCardViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.receivePaymentCardViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func receivePaymentPrintView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReceivePaymentPrintView? {
      return R.nib.receivePaymentPrintView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReceivePaymentPrintView
    }
    
    static func removeCurrencyViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.removeCurrencyViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func sendViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.sendViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func setInflationDestinationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.setInflationDestinationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func titleView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleView? {
      return R.nib.titleView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleView
    }
    
    static func transactionHistoryDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.transactionHistoryDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func transactionHistoryTableViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.transactionHistoryTableViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func transactionResultPrintView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionResultPrintView? {
      return R.nib.transactionResultPrintView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionResultPrintView
    }
    
    static func transactionResultViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.transactionResultViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func transactionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTableViewCell? {
      return R.nib.transactionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTableViewCell
    }
    
    static func unfundedWalletCardContentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UnfundedWalletCardContentView? {
      return R.nib.unfundedWalletCardContentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UnfundedWalletCardContentView
    }
    
    static func walletCardContentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletCardContentView? {
      return R.nib.walletCardContentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletCardContentView
    }
    
    static func walletCardInfoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.walletCardInfoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func walletDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.walletDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.common` struct is generated, and contains static references to 4 localization keys.
    struct common {
      /// en translation: Cancel
      /// 
      /// Locales: en, de
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: No
      /// 
      /// Locales: en, de
      static let no = Rswift.StringResource(key: "no", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en, de
      static let ok = Rswift.StringResource(key: "ok", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Yes
      /// 
      /// Locales: en, de
      static let yes = Rswift.StringResource(key: "yes", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      
      /// en translation: Cancel
      /// 
      /// Locales: en, de
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", tableName: "Common", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No
      /// 
      /// Locales: en, de
      static func no(_: Void = ()) -> String {
        return NSLocalizedString("no", tableName: "Common", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en, de
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("ok", tableName: "Common", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yes
      /// 
      /// Locales: en, de
      static func yes(_: Void = ()) -> String {
        return NSLocalizedString("yes", tableName: "Common", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 254 localization keys.
    struct localizable {
      /// en translation:      example: GBABXVQ64GP5JZ3AQFX5FUYLCVY6HIHMTX4HZQ6...
      /// 
      /// Locales: en
      static let stellar_public_key_hint = Rswift.StringResource(key: "stellar_public_key_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation:      example: max*lumenshine.com
      /// 
      /// Locales: en
      static let stellar_address_hint = Rswift.StringResource(key: "stellar_address_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %1$d days ago
      /// 
      /// Locales: en, de
      static let xMoment_days = Rswift.StringResource(key: "x-moment_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: %1$d hours ago
      /// 
      /// Locales: en, de
      static let xMoment_hours = Rswift.StringResource(key: "x-moment_hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: %1$d minutes ago
      /// 
      /// Locales: en, de
      static let xMoment_minutes = Rswift.StringResource(key: "x-moment_minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: %1$d months ago
      /// 
      /// Locales: en, de
      static let xMoment_months = Rswift.StringResource(key: "x-moment_months", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: %1$d seconds ago
      /// 
      /// Locales: en, de
      static let xMoment_seconds = Rswift.StringResource(key: "x-moment_seconds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: %1$d weeks ago
      /// 
      /// Locales: en, de
      static let xMoment_weeks = Rswift.StringResource(key: "x-moment_weeks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: %1$d years ago
      /// 
      /// Locales: en, de
      static let xMoment_years = Rswift.StringResource(key: "x-moment_years", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: %@ email sent
      /// 
      /// Locales: en, de
      static let lost_security_email_sent = Rswift.StringResource(key: "lost_security_email_sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: *It must contain at least one capital letter
      /// 
      /// Locales: en, de
      static let password_hint3 = Rswift.StringResource(key: "password_hint3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: *It must contain at least one number
      /// 
      /// Locales: en, de
      static let password_hint4 = Rswift.StringResource(key: "password_hint4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: *It must contain at least one small letter
      /// 
      /// Locales: en, de
      static let password_hint2 = Rswift.StringResource(key: "password_hint2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: *The password must have at least 9 characters
      /// 
      /// Locales: en, de
      static let password_hint1 = Rswift.StringResource(key: "password_hint1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: 1. Copy and enter the below displayed 2FA secret code into the authenticator app  2. Enter the generated 2FA code from the authenticator app and press "Next"
      /// 
      /// Locales: en, de
      static let lbl_2fa_hint = Rswift.StringResource(key: "lbl_2fa_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: 2 Factor Authentication (2FA)
      /// 
      /// Locales: en, de
      static let lbl_tfa = Rswift.StringResource(key: "lbl_tfa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: 2 Factor Authentication Code
      /// 
      /// Locales: en, de
      static let lbl_tfa_code = Rswift.StringResource(key: "lbl_tfa_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: 2FA CODE (if enabled)
      /// 
      /// Locales: en, de
      static let tfa_code_configured = Rswift.StringResource(key: "tfa_code_configured", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: 2FA Code
      /// 
      /// Locales: en, de
      static let tfa_code = Rswift.StringResource(key: "tfa_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: 2FA Secret
      /// 
      /// Locales: en, de
      static let fa_secret = Rswift.StringResource(key: "2fa_secret", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: 2FA Secret successfully changed
      /// 
      /// Locales: en, de
      static let tfa_secret_changed = Rswift.StringResource(key: "tfa_secret_changed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: 2FA secret copied to clipboard
      /// 
      /// Locales: en, de
      static let fa_secret_copy = Rswift.StringResource(key: "2FA_secret_copy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: 9 characters
      /// 
      /// Locales: en, de
      static let password_hint1_prefix = Rswift.StringResource(key: "password_hint1_prefix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: About
      /// 
      /// Locales: en, de
      static let about = Rswift.StringResource(key: "about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Account specific data
      /// 
      /// Locales: en, de
      static let account_data_title = Rswift.StringResource(key: "account_data_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Activate
      /// 
      /// Locales: en
      static let activate = Rswift.StringResource(key: "activate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add
      /// 
      /// Locales: en
      static let add = Rswift.StringResource(key: "add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Already verified
      /// 
      /// Locales: en, de
      static let already_verified = Rswift.StringResource(key: "already_verified", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, de
      static let amount = Rswift.StringResource(key: "amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Available
      /// 
      /// Locales: en, de
      static let available = Rswift.StringResource(key: "available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Avatar
      /// 
      /// Locales: en, de
      static let avatar = Rswift.StringResource(key: "avatar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Back
      /// 
      /// Locales: en, de
      static let back = Rswift.StringResource(key: "back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Backup Secret (Mnemonic)
      /// 
      /// Locales: en, de
      static let backup_mnemonic = Rswift.StringResource(key: "backup_mnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Balance
      /// 
      /// Locales: en, de
      static let balance = Rswift.StringResource(key: "balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Balances
      /// 
      /// Locales: en, de
      static let balances = Rswift.StringResource(key: "balances", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Basics
      /// 
      /// Locales: en, de
      static let basics = Rswift.StringResource(key: "basics", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Birth day
      /// 
      /// Locales: en, de
      static let birthday = Rswift.StringResource(key: "birthday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Birth place
      /// 
      /// Locales: en, de
      static let birthplace = Rswift.StringResource(key: "birthplace", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, de
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Change 2FA Secret
      /// 
      /// Locales: en, de
      static let change_2fa = Rswift.StringResource(key: "change_2fa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Change Password
      /// 
      /// Locales: en, de
      static let change_password = Rswift.StringResource(key: "change_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Chart destination currency
      /// 
      /// Locales: en
      static let chart_currency = Rswift.StringResource(key: "chart_currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: City
      /// 
      /// Locales: en, de
      static let city = Rswift.StringResource(key: "city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Click the link to verify your email address.
      /// 
      /// Locales: en, de
      static let email_confirmation_posthint = Rswift.StringResource(key: "email_confirmation_posthint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Close
      /// 
      /// Locales: en, de
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Company name
      /// 
      /// Locales: en, de
      static let company_name = Rswift.StringResource(key: "company_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm noting of your mnemonic
      /// 
      /// Locales: en, de
      static let mnemonic_words_button_lbl = Rswift.StringResource(key: "mnemonic_words_button_lbl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirmation mail resent
      /// 
      /// Locales: en, de
      static let confirmation_mail_resent = Rswift.StringResource(key: "confirmation_mail_resent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Contacts
      /// 
      /// Locales: en, de
      static let contacts = Rswift.StringResource(key: "contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Continue
      /// 
      /// Locales: en, de
      static let `continue` = Rswift.StringResource(key: "continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Country
      /// 
      /// Locales: en, de
      static let country = Rswift.StringResource(key: "country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Currencies
      /// 
      /// Locales: en, de
      static let currencies = Rswift.StringResource(key: "currencies", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Currency
      /// 
      /// Locales: en, de
      static let currency = Rswift.StringResource(key: "currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Current password
      /// 
      /// Locales: en, de
      static let current_password = Rswift.StringResource(key: "current_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Delete
      /// 
      /// Locales: en, de
      static let delete = Rswift.StringResource(key: "delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Deposit money
      /// 
      /// Locales: en, de
      static let deposit = Rswift.StringResource(key: "deposit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Details
      /// 
      /// Locales: en, de
      static let details = Rswift.StringResource(key: "details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Disabled
      /// 
      /// Locales: en, de
      static let disabled = Rswift.StringResource(key: "disabled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Done
      /// 
      /// Locales: en, de
      static let done = Rswift.StringResource(key: "done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Edit
      /// 
      /// Locales: en, de
      static let edit = Rswift.StringResource(key: "edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Edit contact
      /// 
      /// Locales: en
      static let edit_contact = Rswift.StringResource(key: "edit_contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      /// 
      /// Locales: en, de
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Email resent
      /// 
      /// Locales: en, de
      static let email_resent = Rswift.StringResource(key: "email_resent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Empty password.
      /// 
      /// Locales: en, de
      static let empty_password = Rswift.StringResource(key: "empty_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Enabled
      /// 
      /// Locales: en, de
      static let enabled = Rswift.StringResource(key: "enabled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Enter the email address you used to sign up.
      /// 
      /// Locales: en, de
      static let reset_enter_email = Rswift.StringResource(key: "reset_enter_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en, de
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Extras
      /// 
      /// Locales: en, de
      static let extras = Rswift.StringResource(key: "extras", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: FAQ
      /// 
      /// Locales: en, de
      static let faq = Rswift.StringResource(key: "faq", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Face Recognition
      /// 
      /// Locales: en, de
      static let face_recognition = Rswift.StringResource(key: "face_recognition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Fingerprint
      /// 
      /// Locales: en, de
      static let fingerprint = Rswift.StringResource(key: "fingerprint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Fingerprint/Face recognition
      /// 
      /// Locales: en, de
      static let fingerprint_recognition = Rswift.StringResource(key: "fingerprint_recognition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Finish
      /// 
      /// Locales: en, de
      static let finish = Rswift.StringResource(key: "finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Finish setup
      /// 
      /// Locales: en, de
      static let finish_setup = Rswift.StringResource(key: "finish_setup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: For resetting your %@, we sent a message to your email account. Click the link to reset your %@.
      /// 
      /// Locales: en, de
      static let lost_security_email_hint = Rswift.StringResource(key: "lost_security_email_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: For security reasons, your wallet will be protected by 2FA
      /// 
      /// Locales: en, de
      static let lbl_tfa_hint = Rswift.StringResource(key: "lbl_tfa_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Forename
      /// 
      /// Locales: en, de
      static let forename = Rswift.StringResource(key: "forename", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Forgot password
      /// 
      /// Locales: en, de
      static let forgot_password = Rswift.StringResource(key: "forgot_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Found your wallet
      /// 
      /// Locales: en, de
      static let homeScreenFoundWallet = Rswift.StringResource(key: "home-screen-found-wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Fund Wallet
      /// 
      /// Locales: en, de
      static let fund_wallet = Rswift.StringResource(key: "fund_wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Fund Wallet via Friendbot
      /// 
      /// Locales: en
      static let fund_wallet_test = Rswift.StringResource(key: "fund_wallet_test", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Go back and show mnemonic
      /// 
      /// Locales: en, de
      static let back_mnemonic = Rswift.StringResource(key: "back_mnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Guide to getting started with Lumenshine
      /// 
      /// Locales: en, de
      static let basics_detail = Rswift.StringResource(key: "basics_detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Help
      /// 
      /// Locales: en, de
      static let help = Rswift.StringResource(key: "help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Help & Feedback
      /// 
      /// Locales: en, de
      static let help_feedback = Rswift.StringResource(key: "help_feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Help Center
      /// 
      /// Locales: en, de
      static let help_center = Rswift.StringResource(key: "help_center", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Here are 4 random words from the mnemonic. Please indicate their position within the mnemonic.
      /// 
      /// Locales: en, de
      static let verify_mnemonic_words_title = Rswift.StringResource(key: "verify_mnemonic_words_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Home
      /// 
      /// Locales: en, de
      static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: How can I fund my wallet?
      /// 
      /// Locales: en, de
      static let faq_1 = Rswift.StringResource(key: "faq_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: How can I receive other currencies than lumens?
      /// 
      /// Locales: en, de
      static let faq_3 = Rswift.StringResource(key: "faq_3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: How can I send lumens and other currencies?
      /// 
      /// Locales: en, de
      static let faq_4 = Rswift.StringResource(key: "faq_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: How can I setup the inflation destination for my wallet?
      /// 
      /// Locales: en, de
      static let faq_2 = Rswift.StringResource(key: "faq_2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: ICO
      /// 
      /// Locales: en, de
      static let ico = Rswift.StringResource(key: "ico", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: ICOs
      /// 
      /// Locales: en, de
      static let icos = Rswift.StringResource(key: "icos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: If you activate, the app will request your %@ instead of password when opened. Entering the password will not be required each time you open the app. To activate %@ please first insert your password below.
      /// 
      /// Locales: en, de
      static let hint_face_fingerprint = Rswift.StringResource(key: "hint_face_fingerprint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: If you cancel, the 2FA secret will not be changed
      /// 
      /// Locales: en, de
      static let lbl_cancel_2fa_secret = Rswift.StringResource(key: "lbl_cancel_2fa_secret", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Import mnemonic
      /// 
      /// Locales: en, de
      static let import_mnemonic = Rswift.StringResource(key: "import_mnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Info
      /// 
      /// Locales: en, de
      static let info = Rswift.StringResource(key: "info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Invalid Stellar address
      /// 
      /// Locales: en
      static let invalid_address = Rswift.StringResource(key: "invalid_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invalid Stellar public key
      /// 
      /// Locales: en
      static let invalid_public_key = Rswift.StringResource(key: "invalid_public_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invalid email.
      /// 
      /// Locales: en, de
      static let invalid_email = Rswift.StringResource(key: "invalid_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Invalid input
      /// 
      /// Locales: en, de
      static let invalid_input = Rswift.StringResource(key: "invalid_input", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Invalid mobile phone number.
      /// 
      /// Locales: en, de
      static let invalid_phone = Rswift.StringResource(key: "invalid_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Invalid password.
      /// 
      /// Locales: en, de
      static let invalid_password = Rswift.StringResource(key: "invalid_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Invalid request
      /// 
      /// Locales: en, de
      static let invalid_request = Rswift.StringResource(key: "invalid_request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Issuer public key:
      /// 
      /// Locales: en, de
      static let issuer_pk = Rswift.StringResource(key: "issuer_pk", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Join Lumenshine
      /// 
      /// Locales: en, de
      static let join = Rswift.StringResource(key: "join", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Just now
      /// 
      /// Locales: en, de
      static let lbl_now_suffix = Rswift.StringResource(key: "lbl_now_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Lastname
      /// 
      /// Locales: en, de
      static let lastname = Rswift.StringResource(key: "lastname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Learn how to keep your Wallets save
      /// 
      /// Locales: en, de
      static let security_detail = Rswift.StringResource(key: "security_detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Learn how to participate in an ICO
      /// 
      /// Locales: en, de
      static let ico_detail = Rswift.StringResource(key: "ico_detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Learn more
      /// 
      /// Locales: en, de
      static let learn_more = Rswift.StringResource(key: "learn_more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Learn more about Stellar
      /// 
      /// Locales: en, de
      static let stellar_detail = Rswift.StringResource(key: "stellar_detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Learn to master all Wallet features
      /// 
      /// Locales: en, de
      static let wallets_detail = Rswift.StringResource(key: "wallets_detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Log Out
      /// 
      /// Locales: en, de
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Log in
      /// 
      /// Locales: en, de
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Log in to your account
      /// 
      /// Locales: en, de
      static let login_continue = Rswift.StringResource(key: "login_continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Lost 2FA Secret
      /// 
      /// Locales: en, de
      static let lost_2fa = Rswift.StringResource(key: "lost_2fa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Lost Password
      /// 
      /// Locales: en, de
      static let lost_password = Rswift.StringResource(key: "lost_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Lumenshine
      /// 
      /// Locales: en, de
      static let app_name = Rswift.StringResource(key: "app_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Lumenshine
      /// 
      /// Locales: en, de
      static let homeScreenTitle = Rswift.StringResource(key: "home-screen-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: M
      /// 
      /// Locales: en, de
      static let lbl_month_suffix = Rswift.StringResource(key: "lbl_month_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Memo
      /// 
      /// Locales: en, de
      static let memo = Rswift.StringResource(key: "memo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Message
      /// 
      /// Locales: en, de
      static let message = Rswift.StringResource(key: "message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Mobile phone
      /// 
      /// Locales: en, de
      static let mobile_phone = Rswift.StringResource(key: "mobile_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: More
      /// 
      /// Locales: en, de
      static let more = Rswift.StringResource(key: "more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: My Orders
      /// 
      /// Locales: en, de
      static let my_orders = Rswift.StringResource(key: "my_orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en
      static let name = Rswift.StringResource(key: "name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Name is mandatory
      /// 
      /// Locales: en
      static let name_mandatory = Rswift.StringResource(key: "name_mandatory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Nationality
      /// 
      /// Locales: en, de
      static let nationality = Rswift.StringResource(key: "nationality", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Need help or have a suggestion?  The Lumenshine support team is just a quick tap away. Take a look at our FAQ or send us a message.
      /// 
      /// Locales: en, de
      static let help_hint = Rswift.StringResource(key: "help_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: New 2FA Secret
      /// 
      /// Locales: en, de
      static let new_2fa_secret = Rswift.StringResource(key: "new_2fa_secret", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: New contact
      /// 
      /// Locales: en
      static let new_contact = Rswift.StringResource(key: "new_contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New password
      /// 
      /// Locales: en, de
      static let new_password = Rswift.StringResource(key: "new_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, de
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: No stored password.
      /// 
      /// Locales: en
      static let missing_password = Rswift.StringResource(key: "missing_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Not logged in
      /// 
      /// Locales: en, de
      static let not_logged_in = Rswift.StringResource(key: "not_logged_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Note & confirm backup secret (mnemonic)
      /// 
      /// Locales: en, de
      static let mnemonic_title = Rswift.StringResource(key: "mnemonic_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Notifications
      /// 
      /// Locales: en, de
      static let notifications = Rswift.StringResource(key: "notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, de
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Open
      /// 
      /// Locales: en, de
      static let `open` = Rswift.StringResource(key: "open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Operation ID
      /// 
      /// Locales: en, de
      static let operation_id = Rswift.StringResource(key: "operation_id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Password requirements
      /// 
      /// Locales: en, de
      static let password_hint_title = Rswift.StringResource(key: "password_hint_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Password successfully changed
      /// 
      /// Locales: en, de
      static let password_changed = Rswift.StringResource(key: "password_changed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Personal data
      /// 
      /// Locales: en, de
      static let personal_data = Rswift.StringResource(key: "personal_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Please fill in the form below with valid information
      /// 
      /// Locales: en, de
      static let login_fill = Rswift.StringResource(key: "login_fill", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Please select the destination currency for Chart cards
      /// 
      /// Locales: en
      static let chart_currency_hint = Rswift.StringResource(key: "chart_currency_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please verify your email address first.
      /// 
      /// Locales: en, de
      static let lbl_please_confirm = Rswift.StringResource(key: "lbl_please_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Please write down your backup secret (mnemonic). You can use it if you lose your password to recover your wallet. It can be also used in other apps / wallets that support import from mnemonic. If you lose your password and the mnemonic you will not be able to access your funds any more. We can not recover your account if you lose both (password and mnemonic). We do not store password and mnemonic.
      /// 
      /// Locales: en, de
      static let mnemonic_hint_lbl = Rswift.StringResource(key: "mnemonic_hint_lbl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Position
      /// 
      /// Locales: en, de
      static let position = Rswift.StringResource(key: "position", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Print
      /// 
      /// Locales: en, de
      static let print = Rswift.StringResource(key: "print", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Prove noting of mnemonic
      /// 
      /// Locales: en, de
      static let verify_mnemonic_title = Rswift.StringResource(key: "verify_mnemonic_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Read more
      /// 
      /// Locales: en, de
      static let read_more = Rswift.StringResource(key: "read_more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Read more about mnemonics
      /// 
      /// Locales: en, de
      static let mnemonic_more_lbl = Rswift.StringResource(key: "mnemonic_more_lbl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Receive
      /// 
      /// Locales: en, de
      static let receive = Rswift.StringResource(key: "receive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Recipient
      /// 
      /// Locales: en, de
      static let recipient = Rswift.StringResource(key: "recipient", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Refresh
      /// 
      /// Locales: en, de
      static let refresh = Rswift.StringResource(key: "refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Remove
      /// 
      /// Locales: en, de
      static let remove = Rswift.StringResource(key: "remove", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Repeat new password
      /// 
      /// Locales: en, de
      static let repeat_new_password = Rswift.StringResource(key: "repeat_new_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Repeat password
      /// 
      /// Locales: en, de
      static let repeat_password = Rswift.StringResource(key: "repeat_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Repetition do not match with password.
      /// 
      /// Locales: en, de
      static let invalid_repassword = Rswift.StringResource(key: "invalid_repassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Resend email
      /// 
      /// Locales: en, de
      static let resend_email = Rswift.StringResource(key: "resend_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Resend verification link
      /// 
      /// Locales: en, de
      static let email_resend_confirmation = Rswift.StringResource(key: "email_resend_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Reset 2fa
      /// 
      /// Locales: en, de
      static let reset_2fa = Rswift.StringResource(key: "reset_2fa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Reset password
      /// 
      /// Locales: en, de
      static let reset_password = Rswift.StringResource(key: "reset_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Reveal
      /// 
      /// Locales: en, de
      static let reveal = Rswift.StringResource(key: "reveal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Salutation
      /// 
      /// Locales: en, de
      static let salutation = Rswift.StringResource(key: "salutation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en, de
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Scan
      /// 
      /// Locales: en, de
      static let scan = Rswift.StringResource(key: "scan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Security
      /// 
      /// Locales: en, de
      static let security = Rswift.StringResource(key: "security", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Sell
      /// 
      /// Locales: en, de
      static let sell = Rswift.StringResource(key: "sell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, de
      static let send = Rswift.StringResource(key: "send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Send Feedback
      /// 
      /// Locales: en, de
      static let send_feedback = Rswift.StringResource(key: "send_feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Send Payment
      /// 
      /// Locales: en
      static let send_payment = Rswift.StringResource(key: "send_payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send other
      /// 
      /// Locales: en, de
      static let send_other = Rswift.StringResource(key: "send_other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, de
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Setup Wallet
      /// 
      /// Locales: en, de
      static let setup_wallet = Rswift.StringResource(key: "setup_wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Sign Out
      /// 
      /// Locales: en, de
      static let signout = Rswift.StringResource(key: "signout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Sign up
      /// 
      /// Locales: en, de
      static let signup = Rswift.StringResource(key: "signup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: State
      /// 
      /// Locales: en, de
      static let state = Rswift.StringResource(key: "state", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Status
      /// 
      /// Locales: en, de
      static let status = Rswift.StringResource(key: "status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Stellar
      /// 
      /// Locales: en, de
      static let stellar = Rswift.StringResource(key: "stellar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Stellar Currency (%@)
      /// 
      /// Locales: en
      static let chart_card_title2 = Rswift.StringResource(key: "chart_card_title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Stellar Lumens (XLM)
      /// 
      /// Locales: en, de
      static let chart_card_title = Rswift.StringResource(key: "chart_card_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Stellar address
      /// 
      /// Locales: en
      static let stellar_address = Rswift.StringResource(key: "stellar_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Stellar public key
      /// 
      /// Locales: en
      static let stellar_public_key = Rswift.StringResource(key: "stellar_public_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Street address
      /// 
      /// Locales: en, de
      static let street_address = Rswift.StringResource(key: "street_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Street number
      /// 
      /// Locales: en, de
      static let street_number = Rswift.StringResource(key: "street_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Submit
      /// 
      /// Locales: en, de
      static let submit = Rswift.StringResource(key: "submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Success
      /// 
      /// Locales: en, de
      static let success = Rswift.StringResource(key: "success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Support inbox
      /// 
      /// Locales: en, de
      static let support_inbox = Rswift.StringResource(key: "support_inbox", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: This step is very important
      /// 
      /// Locales: en, de
      static let mnemonic_hint_title = Rswift.StringResource(key: "mnemonic_hint_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Title
      /// 
      /// Locales: en, de
      static let title = Rswift.StringResource(key: "title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: To change your 2FA Secret please insert your password.
      /// 
      /// Locales: en, de
      static let change_2fa_hint = Rswift.StringResource(key: "change_2fa_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: To change your password please provide current and new password.
      /// 
      /// Locales: en, de
      static let change_password_hint = Rswift.StringResource(key: "change_password_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: To prove the noting of your mnemonic, please complete following quiz.
      /// 
      /// Locales: en, de
      static let verify_mnemonic_hint = Rswift.StringResource(key: "verify_mnemonic_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: To reveal your backup secret/mnemonic please provide your password.
      /// 
      /// Locales: en, de
      static let reveal_backup_mnemonic = Rswift.StringResource(key: "reveal_backup_mnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: To setup 2FA, please:  1. Download a two-factor authenticator app (like Google Authenticator)  2. Copy and enter the above displayed 2FA secret code into the authenticator app  3. Enter the generated 2FA code from the authenticator app and press "Next"
      /// 
      /// Locales: en, de
      static let lbl_tfa_setup = Rswift.StringResource(key: "lbl_tfa_setup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Today
      /// 
      /// Locales: en, de
      static let lbl_today = Rswift.StringResource(key: "lbl_today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Topics
      /// 
      /// Locales: en, de
      static let topics = Rswift.StringResource(key: "topics", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Transaction fee
      /// 
      /// Locales: en, de
      static let transaction_fee = Rswift.StringResource(key: "transaction_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Transaction result
      /// 
      /// Locales: en, de
      static let transaction_result = Rswift.StringResource(key: "transaction_result", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Transactions
      /// 
      /// Locales: en, de
      static let transactions = Rswift.StringResource(key: "transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Unexpected data type
      /// 
      /// Locales: en, de
      static let unexpected_data_type = Rswift.StringResource(key: "unexpected_data_type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Unlock
      /// 
      /// Locales: en, de
      static let unlock_button = Rswift.StringResource(key: "unlock_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Unlock app
      /// 
      /// Locales: en, de
      static let unlock_app = Rswift.StringResource(key: "unlock_app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Update
      /// 
      /// Locales: en
      static let update = Rswift.StringResource(key: "update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Updated %@
      /// 
      /// Locales: en, de
      static let updated = Rswift.StringResource(key: "updated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: User is not logged in
      /// 
      /// Locales: en, de
      static let user_not_logged_in = Rswift.StringResource(key: "user_not_logged_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: User specific data
      /// 
      /// Locales: en, de
      static let user_data_title = Rswift.StringResource(key: "user_data_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Username
      /// 
      /// Locales: en, de
      static let username = Rswift.StringResource(key: "username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Verify your email address
      /// 
      /// Locales: en, de
      static let lbl_email_confirmation = Rswift.StringResource(key: "lbl_email_confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: View FAQ
      /// 
      /// Locales: en, de
      static let view_faq = Rswift.StringResource(key: "view_faq", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: W
      /// 
      /// Locales: en, de
      static let lbl_week_suffix = Rswift.StringResource(key: "lbl_week_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Wallets
      /// 
      /// Locales: en, de
      static let wallets = Rswift.StringResource(key: "wallets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: We sent a verification message to
      /// 
      /// Locales: en, de
      static let email_confirmation_prehint = Rswift.StringResource(key: "email_confirmation_prehint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Welcome
      /// 
      /// Locales: en, de
      static let welcome = Rswift.StringResource(key: "welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Withdraw money
      /// 
      /// Locales: en, de
      static let withdraw = Rswift.StringResource(key: "withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Wrong account or password
      /// 
      /// Locales: en, de
      static let bad_credentials = Rswift.StringResource(key: "bad_credentials", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: You must enter address OR public key
      /// 
      /// Locales: en
      static let stellar_address_error = Rswift.StringResource(key: "stellar_address_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your 2FA secret: %@
      /// 
      /// Locales: en, de
      static let lbl_tfa_secret = Rswift.StringResource(key: "lbl_tfa_secret", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your Secret (24 words mnemonic):
      /// 
      /// Locales: en, de
      static let mnemonic_words_title = Rswift.StringResource(key: "mnemonic_words_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your email address is not verified. We sent a verification message to your email account. Click the link to verify your email address. After doing so, please come back and press the "Already verified" button to finish resetting your password.
      /// 
      /// Locales: en, de
      static let email_confirmation_hint2 = Rswift.StringResource(key: "email_confirmation_hint2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your new 2FA secret: %@
      /// 
      /// Locales: en, de
      static let lbl_new_2fa_secret = Rswift.StringResource(key: "lbl_new_2fa_secret", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Zip code
      /// 
      /// Locales: en, de
      static let zip_code = Rswift.StringResource(key: "zip_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: d
      /// 
      /// Locales: en, de
      static let lbl_day_suffix = Rswift.StringResource(key: "lbl_day_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: day
      /// 
      /// Locales: en, de
      static let day = Rswift.StringResource(key: "day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: days
      /// 
      /// Locales: en, de
      static let days = Rswift.StringResource(key: "days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: h
      /// 
      /// Locales: en, de
      static let lbl_hour_suffix = Rswift.StringResource(key: "lbl_hour_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: here
      /// 
      /// Locales: en, de
      static let here = Rswift.StringResource(key: "here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: hour
      /// 
      /// Locales: en
      static let hour = Rswift.StringResource(key: "hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: hours
      /// 
      /// Locales: en
      static let hours = Rswift.StringResource(key: "hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: loading
      /// 
      /// Locales: en, de
      static let loading = Rswift.StringResource(key: "loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: m
      /// 
      /// Locales: en, de
      static let lbl_minute_suffix = Rswift.StringResource(key: "lbl_minute_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: month
      /// 
      /// Locales: en
      static let month = Rswift.StringResource(key: "month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: months
      /// 
      /// Locales: en
      static let months = Rswift.StringResource(key: "months", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: no stellar address
      /// 
      /// Locales: en
      static let no_stellar_address = Rswift.StringResource(key: "no_stellar_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: one capital letter
      /// 
      /// Locales: en, de
      static let password_hint3_prefix = Rswift.StringResource(key: "password_hint3_prefix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: one day ago
      /// 
      /// Locales: en, de
      static let lbl_moment_day_count = Rswift.StringResource(key: "lbl_moment_day_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: one hour ago
      /// 
      /// Locales: en, de
      static let lbl_moment_hour_count = Rswift.StringResource(key: "lbl_moment_hour_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: one minute ago
      /// 
      /// Locales: en, de
      static let lbl_moment_minute_count = Rswift.StringResource(key: "lbl_moment_minute_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: one month ago
      /// 
      /// Locales: en, de
      static let lbl_moment_month_count = Rswift.StringResource(key: "lbl_moment_month_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: one number
      /// 
      /// Locales: en, de
      static let password_hint4_prefix = Rswift.StringResource(key: "password_hint4_prefix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: one second ago
      /// 
      /// Locales: en, de
      static let lbl_moment_second_count = Rswift.StringResource(key: "lbl_moment_second_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: one small letter
      /// 
      /// Locales: en, de
      static let password_hint2_prefix = Rswift.StringResource(key: "password_hint2_prefix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: one week ago
      /// 
      /// Locales: en, de
      static let lbl_moment_week_count = Rswift.StringResource(key: "lbl_moment_week_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: one year ago
      /// 
      /// Locales: en, de
      static let lbl_moment_year_count = Rswift.StringResource(key: "lbl_moment_year_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: password
      /// 
      /// Locales: en, de
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: step %@ of 3
      /// 
      /// Locales: en, de
      static let step_3 = Rswift.StringResource(key: "step_3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: week
      /// 
      /// Locales: en
      static let week = Rswift.StringResource(key: "week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: weeks
      /// 
      /// Locales: en
      static let weeks = Rswift.StringResource(key: "weeks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: y
      /// 
      /// Locales: en, de
      static let lbl_year_suffix = Rswift.StringResource(key: "lbl_year_suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: year
      /// 
      /// Locales: en
      static let year = Rswift.StringResource(key: "year", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: years
      /// 
      /// Locales: en
      static let years = Rswift.StringResource(key: "years", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation:      example: GBABXVQ64GP5JZ3AQFX5FUYLCVY6HIHMTX4HZQ6...
      /// 
      /// Locales: en
      static func stellar_public_key_hint(_: Void = ()) -> String {
        return NSLocalizedString("stellar_public_key_hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation:      example: max*lumenshine.com
      /// 
      /// Locales: en
      static func stellar_address_hint(_: Void = ()) -> String {
        return NSLocalizedString("stellar_address_hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: %1$d days ago
      /// 
      /// Locales: en, de
      static func xMoment_days(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_days", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d hours ago
      /// 
      /// Locales: en, de
      static func xMoment_hours(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_hours", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d minutes ago
      /// 
      /// Locales: en, de
      static func xMoment_minutes(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_minutes", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d months ago
      /// 
      /// Locales: en, de
      static func xMoment_months(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_months", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d seconds ago
      /// 
      /// Locales: en, de
      static func xMoment_seconds(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_seconds", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d weeks ago
      /// 
      /// Locales: en, de
      static func xMoment_weeks(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_weeks", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$d years ago
      /// 
      /// Locales: en, de
      static func xMoment_years(_ value1: Int) -> String {
        return String(format: NSLocalizedString("x-moment_years", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ email sent
      /// 
      /// Locales: en, de
      static func lost_security_email_sent(_ value1: String) -> String {
        return String(format: NSLocalizedString("lost_security_email_sent", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: *It must contain at least one capital letter
      /// 
      /// Locales: en, de
      static func password_hint3(_: Void = ()) -> String {
        return NSLocalizedString("password_hint3", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: *It must contain at least one number
      /// 
      /// Locales: en, de
      static func password_hint4(_: Void = ()) -> String {
        return NSLocalizedString("password_hint4", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: *It must contain at least one small letter
      /// 
      /// Locales: en, de
      static func password_hint2(_: Void = ()) -> String {
        return NSLocalizedString("password_hint2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: *The password must have at least 9 characters
      /// 
      /// Locales: en, de
      static func password_hint1(_: Void = ()) -> String {
        return NSLocalizedString("password_hint1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1. Copy and enter the below displayed 2FA secret code into the authenticator app  2. Enter the generated 2FA code from the authenticator app and press "Next"
      /// 
      /// Locales: en, de
      static func lbl_2fa_hint(_: Void = ()) -> String {
        return NSLocalizedString("lbl_2fa_hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2 Factor Authentication (2FA)
      /// 
      /// Locales: en, de
      static func lbl_tfa(_: Void = ()) -> String {
        return NSLocalizedString("lbl_tfa", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2 Factor Authentication Code
      /// 
      /// Locales: en, de
      static func lbl_tfa_code(_: Void = ()) -> String {
        return NSLocalizedString("lbl_tfa_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2FA CODE (if enabled)
      /// 
      /// Locales: en, de
      static func tfa_code_configured(_: Void = ()) -> String {
        return NSLocalizedString("tfa_code_configured", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2FA Code
      /// 
      /// Locales: en, de
      static func tfa_code(_: Void = ()) -> String {
        return NSLocalizedString("tfa_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2FA Secret
      /// 
      /// Locales: en, de
      static func fa_secret(_: Void = ()) -> String {
        return NSLocalizedString("2fa_secret", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2FA Secret successfully changed
      /// 
      /// Locales: en, de
      static func tfa_secret_changed(_: Void = ()) -> String {
        return NSLocalizedString("tfa_secret_changed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2FA secret copied to clipboard
      /// 
      /// Locales: en, de
      static func fa_secret_copy(_: Void = ()) -> String {
        return NSLocalizedString("2FA_secret_copy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 9 characters
      /// 
      /// Locales: en, de
      static func password_hint1_prefix(_: Void = ()) -> String {
        return NSLocalizedString("password_hint1_prefix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About
      /// 
      /// Locales: en, de
      static func about(_: Void = ()) -> String {
        return NSLocalizedString("about", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account specific data
      /// 
      /// Locales: en, de
      static func account_data_title(_: Void = ()) -> String {
        return NSLocalizedString("account_data_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Activate
      /// 
      /// Locales: en
      static func activate(_: Void = ()) -> String {
        return NSLocalizedString("activate", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add
      /// 
      /// Locales: en
      static func add(_: Void = ()) -> String {
        return NSLocalizedString("add", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Already verified
      /// 
      /// Locales: en, de
      static func already_verified(_: Void = ()) -> String {
        return NSLocalizedString("already_verified", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, de
      static func amount(_: Void = ()) -> String {
        return NSLocalizedString("amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Available
      /// 
      /// Locales: en, de
      static func available(_: Void = ()) -> String {
        return NSLocalizedString("available", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Avatar
      /// 
      /// Locales: en, de
      static func avatar(_: Void = ()) -> String {
        return NSLocalizedString("avatar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back
      /// 
      /// Locales: en, de
      static func back(_: Void = ()) -> String {
        return NSLocalizedString("back", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backup Secret (Mnemonic)
      /// 
      /// Locales: en, de
      static func backup_mnemonic(_: Void = ()) -> String {
        return NSLocalizedString("backup_mnemonic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance
      /// 
      /// Locales: en, de
      static func balance(_: Void = ()) -> String {
        return NSLocalizedString("balance", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balances
      /// 
      /// Locales: en, de
      static func balances(_: Void = ()) -> String {
        return NSLocalizedString("balances", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Basics
      /// 
      /// Locales: en, de
      static func basics(_: Void = ()) -> String {
        return NSLocalizedString("basics", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Birth day
      /// 
      /// Locales: en, de
      static func birthday(_: Void = ()) -> String {
        return NSLocalizedString("birthday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Birth place
      /// 
      /// Locales: en, de
      static func birthplace(_: Void = ()) -> String {
        return NSLocalizedString("birthplace", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, de
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change 2FA Secret
      /// 
      /// Locales: en, de
      static func change_2fa(_: Void = ()) -> String {
        return NSLocalizedString("change_2fa", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change Password
      /// 
      /// Locales: en, de
      static func change_password(_: Void = ()) -> String {
        return NSLocalizedString("change_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Chart destination currency
      /// 
      /// Locales: en
      static func chart_currency(_: Void = ()) -> String {
        return NSLocalizedString("chart_currency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: City
      /// 
      /// Locales: en, de
      static func city(_: Void = ()) -> String {
        return NSLocalizedString("city", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click the link to verify your email address.
      /// 
      /// Locales: en, de
      static func email_confirmation_posthint(_: Void = ()) -> String {
        return NSLocalizedString("email_confirmation_posthint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Close
      /// 
      /// Locales: en, de
      static func close(_: Void = ()) -> String {
        return NSLocalizedString("close", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Company name
      /// 
      /// Locales: en, de
      static func company_name(_: Void = ()) -> String {
        return NSLocalizedString("company_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm noting of your mnemonic
      /// 
      /// Locales: en, de
      static func mnemonic_words_button_lbl(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic_words_button_lbl", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirmation mail resent
      /// 
      /// Locales: en, de
      static func confirmation_mail_resent(_: Void = ()) -> String {
        return NSLocalizedString("confirmation_mail_resent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contacts
      /// 
      /// Locales: en, de
      static func contacts(_: Void = ()) -> String {
        return NSLocalizedString("contacts", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Continue
      /// 
      /// Locales: en, de
      static func `continue`(_: Void = ()) -> String {
        return NSLocalizedString("continue", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Country
      /// 
      /// Locales: en, de
      static func country(_: Void = ()) -> String {
        return NSLocalizedString("country", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currencies
      /// 
      /// Locales: en, de
      static func currencies(_: Void = ()) -> String {
        return NSLocalizedString("currencies", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currency
      /// 
      /// Locales: en, de
      static func currency(_: Void = ()) -> String {
        return NSLocalizedString("currency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current password
      /// 
      /// Locales: en, de
      static func current_password(_: Void = ()) -> String {
        return NSLocalizedString("current_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete
      /// 
      /// Locales: en, de
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit money
      /// 
      /// Locales: en, de
      static func deposit(_: Void = ()) -> String {
        return NSLocalizedString("deposit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Details
      /// 
      /// Locales: en, de
      static func details(_: Void = ()) -> String {
        return NSLocalizedString("details", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Disabled
      /// 
      /// Locales: en, de
      static func disabled(_: Void = ()) -> String {
        return NSLocalizedString("disabled", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Done
      /// 
      /// Locales: en, de
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("done", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit
      /// 
      /// Locales: en, de
      static func edit(_: Void = ()) -> String {
        return NSLocalizedString("edit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit contact
      /// 
      /// Locales: en
      static func edit_contact(_: Void = ()) -> String {
        return NSLocalizedString("edit_contact", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email
      /// 
      /// Locales: en, de
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email resent
      /// 
      /// Locales: en, de
      static func email_resent(_: Void = ()) -> String {
        return NSLocalizedString("email_resent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Empty password.
      /// 
      /// Locales: en, de
      static func empty_password(_: Void = ()) -> String {
        return NSLocalizedString("empty_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enabled
      /// 
      /// Locales: en, de
      static func enabled(_: Void = ()) -> String {
        return NSLocalizedString("enabled", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter the email address you used to sign up.
      /// 
      /// Locales: en, de
      static func reset_enter_email(_: Void = ()) -> String {
        return NSLocalizedString("reset_enter_email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en, de
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Extras
      /// 
      /// Locales: en, de
      static func extras(_: Void = ()) -> String {
        return NSLocalizedString("extras", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: FAQ
      /// 
      /// Locales: en, de
      static func faq(_: Void = ()) -> String {
        return NSLocalizedString("faq", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Face Recognition
      /// 
      /// Locales: en, de
      static func face_recognition(_: Void = ()) -> String {
        return NSLocalizedString("face_recognition", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fingerprint
      /// 
      /// Locales: en, de
      static func fingerprint(_: Void = ()) -> String {
        return NSLocalizedString("fingerprint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fingerprint/Face recognition
      /// 
      /// Locales: en, de
      static func fingerprint_recognition(_: Void = ()) -> String {
        return NSLocalizedString("fingerprint_recognition", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Finish
      /// 
      /// Locales: en, de
      static func finish(_: Void = ()) -> String {
        return NSLocalizedString("finish", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Finish setup
      /// 
      /// Locales: en, de
      static func finish_setup(_: Void = ()) -> String {
        return NSLocalizedString("finish_setup", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: For resetting your %@, we sent a message to your email account. Click the link to reset your %@.
      /// 
      /// Locales: en, de
      static func lost_security_email_hint(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("lost_security_email_hint", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: For security reasons, your wallet will be protected by 2FA
      /// 
      /// Locales: en, de
      static func lbl_tfa_hint(_: Void = ()) -> String {
        return NSLocalizedString("lbl_tfa_hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forename
      /// 
      /// Locales: en, de
      static func forename(_: Void = ()) -> String {
        return NSLocalizedString("forename", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forgot password
      /// 
      /// Locales: en, de
      static func forgot_password(_: Void = ()) -> String {
        return NSLocalizedString("forgot_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Found your wallet
      /// 
      /// Locales: en, de
      static func homeScreenFoundWallet(_: Void = ()) -> String {
        return NSLocalizedString("home-screen-found-wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fund Wallet
      /// 
      /// Locales: en, de
      static func fund_wallet(_: Void = ()) -> String {
        return NSLocalizedString("fund_wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fund Wallet via Friendbot
      /// 
      /// Locales: en
      static func fund_wallet_test(_: Void = ()) -> String {
        return NSLocalizedString("fund_wallet_test", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Go back and show mnemonic
      /// 
      /// Locales: en, de
      static func back_mnemonic(_: Void = ()) -> String {
        return NSLocalizedString("back_mnemonic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Guide to getting started with Lumenshine
      /// 
      /// Locales: en, de
      static func basics_detail(_: Void = ()) -> String {
        return NSLocalizedString("basics_detail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help
      /// 
      /// Locales: en, de
      static func help(_: Void = ()) -> String {
        return NSLocalizedString("help", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help & Feedback
      /// 
      /// Locales: en, de
      static func help_feedback(_: Void = ()) -> String {
        return NSLocalizedString("help_feedback", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help Center
      /// 
      /// Locales: en, de
      static func help_center(_: Void = ()) -> String {
        return NSLocalizedString("help_center", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Here are 4 random words from the mnemonic. Please indicate their position within the mnemonic.
      /// 
      /// Locales: en, de
      static func verify_mnemonic_words_title(_: Void = ()) -> String {
        return NSLocalizedString("verify_mnemonic_words_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home
      /// 
      /// Locales: en, de
      static func home(_: Void = ()) -> String {
        return NSLocalizedString("home", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How can I fund my wallet?
      /// 
      /// Locales: en, de
      static func faq_1(_: Void = ()) -> String {
        return NSLocalizedString("faq_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How can I receive other currencies than lumens?
      /// 
      /// Locales: en, de
      static func faq_3(_: Void = ()) -> String {
        return NSLocalizedString("faq_3", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How can I send lumens and other currencies?
      /// 
      /// Locales: en, de
      static func faq_4(_: Void = ()) -> String {
        return NSLocalizedString("faq_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How can I setup the inflation destination for my wallet?
      /// 
      /// Locales: en, de
      static func faq_2(_: Void = ()) -> String {
        return NSLocalizedString("faq_2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ICO
      /// 
      /// Locales: en, de
      static func ico(_: Void = ()) -> String {
        return NSLocalizedString("ico", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ICOs
      /// 
      /// Locales: en, de
      static func icos(_: Void = ()) -> String {
        return NSLocalizedString("icos", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: If you activate, the app will request your %@ instead of password when opened. Entering the password will not be required each time you open the app. To activate %@ please first insert your password below.
      /// 
      /// Locales: en, de
      static func hint_face_fingerprint(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("hint_face_fingerprint", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: If you cancel, the 2FA secret will not be changed
      /// 
      /// Locales: en, de
      static func lbl_cancel_2fa_secret(_: Void = ()) -> String {
        return NSLocalizedString("lbl_cancel_2fa_secret", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import mnemonic
      /// 
      /// Locales: en, de
      static func import_mnemonic(_: Void = ()) -> String {
        return NSLocalizedString("import_mnemonic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Info
      /// 
      /// Locales: en, de
      static func info(_: Void = ()) -> String {
        return NSLocalizedString("info", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid Stellar address
      /// 
      /// Locales: en
      static func invalid_address(_: Void = ()) -> String {
        return NSLocalizedString("invalid_address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid Stellar public key
      /// 
      /// Locales: en
      static func invalid_public_key(_: Void = ()) -> String {
        return NSLocalizedString("invalid_public_key", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid email.
      /// 
      /// Locales: en, de
      static func invalid_email(_: Void = ()) -> String {
        return NSLocalizedString("invalid_email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid input
      /// 
      /// Locales: en, de
      static func invalid_input(_: Void = ()) -> String {
        return NSLocalizedString("invalid_input", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid mobile phone number.
      /// 
      /// Locales: en, de
      static func invalid_phone(_: Void = ()) -> String {
        return NSLocalizedString("invalid_phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid password.
      /// 
      /// Locales: en, de
      static func invalid_password(_: Void = ()) -> String {
        return NSLocalizedString("invalid_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid request
      /// 
      /// Locales: en, de
      static func invalid_request(_: Void = ()) -> String {
        return NSLocalizedString("invalid_request", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Issuer public key:
      /// 
      /// Locales: en, de
      static func issuer_pk(_: Void = ()) -> String {
        return NSLocalizedString("issuer_pk", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Join Lumenshine
      /// 
      /// Locales: en, de
      static func join(_: Void = ()) -> String {
        return NSLocalizedString("join", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Just now
      /// 
      /// Locales: en, de
      static func lbl_now_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_now_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lastname
      /// 
      /// Locales: en, de
      static func lastname(_: Void = ()) -> String {
        return NSLocalizedString("lastname", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Learn how to keep your Wallets save
      /// 
      /// Locales: en, de
      static func security_detail(_: Void = ()) -> String {
        return NSLocalizedString("security_detail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Learn how to participate in an ICO
      /// 
      /// Locales: en, de
      static func ico_detail(_: Void = ()) -> String {
        return NSLocalizedString("ico_detail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Learn more
      /// 
      /// Locales: en, de
      static func learn_more(_: Void = ()) -> String {
        return NSLocalizedString("learn_more", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Learn more about Stellar
      /// 
      /// Locales: en, de
      static func stellar_detail(_: Void = ()) -> String {
        return NSLocalizedString("stellar_detail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Learn to master all Wallet features
      /// 
      /// Locales: en, de
      static func wallets_detail(_: Void = ()) -> String {
        return NSLocalizedString("wallets_detail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Log Out
      /// 
      /// Locales: en, de
      static func logout(_: Void = ()) -> String {
        return NSLocalizedString("logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Log in
      /// 
      /// Locales: en, de
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Log in to your account
      /// 
      /// Locales: en, de
      static func login_continue(_: Void = ()) -> String {
        return NSLocalizedString("login_continue", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lost 2FA Secret
      /// 
      /// Locales: en, de
      static func lost_2fa(_: Void = ()) -> String {
        return NSLocalizedString("lost_2fa", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lost Password
      /// 
      /// Locales: en, de
      static func lost_password(_: Void = ()) -> String {
        return NSLocalizedString("lost_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lumenshine
      /// 
      /// Locales: en, de
      static func app_name(_: Void = ()) -> String {
        return NSLocalizedString("app_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lumenshine
      /// 
      /// Locales: en, de
      static func homeScreenTitle(_: Void = ()) -> String {
        return NSLocalizedString("home-screen-title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: M
      /// 
      /// Locales: en, de
      static func lbl_month_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_month_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Memo
      /// 
      /// Locales: en, de
      static func memo(_: Void = ()) -> String {
        return NSLocalizedString("memo", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Message
      /// 
      /// Locales: en, de
      static func message(_: Void = ()) -> String {
        return NSLocalizedString("message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mobile phone
      /// 
      /// Locales: en, de
      static func mobile_phone(_: Void = ()) -> String {
        return NSLocalizedString("mobile_phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: More
      /// 
      /// Locales: en, de
      static func more(_: Void = ()) -> String {
        return NSLocalizedString("more", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Orders
      /// 
      /// Locales: en, de
      static func my_orders(_: Void = ()) -> String {
        return NSLocalizedString("my_orders", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en
      static func name(_: Void = ()) -> String {
        return NSLocalizedString("name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name is mandatory
      /// 
      /// Locales: en
      static func name_mandatory(_: Void = ()) -> String {
        return NSLocalizedString("name_mandatory", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nationality
      /// 
      /// Locales: en, de
      static func nationality(_: Void = ()) -> String {
        return NSLocalizedString("nationality", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Need help or have a suggestion?  The Lumenshine support team is just a quick tap away. Take a look at our FAQ or send us a message.
      /// 
      /// Locales: en, de
      static func help_hint(_: Void = ()) -> String {
        return NSLocalizedString("help_hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New 2FA Secret
      /// 
      /// Locales: en, de
      static func new_2fa_secret(_: Void = ()) -> String {
        return NSLocalizedString("new_2fa_secret", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New contact
      /// 
      /// Locales: en
      static func new_contact(_: Void = ()) -> String {
        return NSLocalizedString("new_contact", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New password
      /// 
      /// Locales: en, de
      static func new_password(_: Void = ()) -> String {
        return NSLocalizedString("new_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, de
      static func next(_: Void = ()) -> String {
        return NSLocalizedString("next", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No stored password.
      /// 
      /// Locales: en
      static func missing_password(_: Void = ()) -> String {
        return NSLocalizedString("missing_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not logged in
      /// 
      /// Locales: en, de
      static func not_logged_in(_: Void = ()) -> String {
        return NSLocalizedString("not_logged_in", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Note & confirm backup secret (mnemonic)
      /// 
      /// Locales: en, de
      static func mnemonic_title(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notifications
      /// 
      /// Locales: en, de
      static func notifications(_: Void = ()) -> String {
        return NSLocalizedString("notifications", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, de
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open
      /// 
      /// Locales: en, de
      static func `open`(_: Void = ()) -> String {
        return NSLocalizedString("open", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Operation ID
      /// 
      /// Locales: en, de
      static func operation_id(_: Void = ()) -> String {
        return NSLocalizedString("operation_id", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password requirements
      /// 
      /// Locales: en, de
      static func password_hint_title(_: Void = ()) -> String {
        return NSLocalizedString("password_hint_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password successfully changed
      /// 
      /// Locales: en, de
      static func password_changed(_: Void = ()) -> String {
        return NSLocalizedString("password_changed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Personal data
      /// 
      /// Locales: en, de
      static func personal_data(_: Void = ()) -> String {
        return NSLocalizedString("personal_data", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please fill in the form below with valid information
      /// 
      /// Locales: en, de
      static func login_fill(_: Void = ()) -> String {
        return NSLocalizedString("login_fill", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please select the destination currency for Chart cards
      /// 
      /// Locales: en
      static func chart_currency_hint(_: Void = ()) -> String {
        return NSLocalizedString("chart_currency_hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please verify your email address first.
      /// 
      /// Locales: en, de
      static func lbl_please_confirm(_: Void = ()) -> String {
        return NSLocalizedString("lbl_please_confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please write down your backup secret (mnemonic). You can use it if you lose your password to recover your wallet. It can be also used in other apps / wallets that support import from mnemonic. If you lose your password and the mnemonic you will not be able to access your funds any more. We can not recover your account if you lose both (password and mnemonic). We do not store password and mnemonic.
      /// 
      /// Locales: en, de
      static func mnemonic_hint_lbl(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic_hint_lbl", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Position
      /// 
      /// Locales: en, de
      static func position(_: Void = ()) -> String {
        return NSLocalizedString("position", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Print
      /// 
      /// Locales: en, de
      static func print(_: Void = ()) -> String {
        return NSLocalizedString("print", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Prove noting of mnemonic
      /// 
      /// Locales: en, de
      static func verify_mnemonic_title(_: Void = ()) -> String {
        return NSLocalizedString("verify_mnemonic_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Read more
      /// 
      /// Locales: en, de
      static func read_more(_: Void = ()) -> String {
        return NSLocalizedString("read_more", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Read more about mnemonics
      /// 
      /// Locales: en, de
      static func mnemonic_more_lbl(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic_more_lbl", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive
      /// 
      /// Locales: en, de
      static func receive(_: Void = ()) -> String {
        return NSLocalizedString("receive", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient
      /// 
      /// Locales: en, de
      static func recipient(_: Void = ()) -> String {
        return NSLocalizedString("recipient", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Refresh
      /// 
      /// Locales: en, de
      static func refresh(_: Void = ()) -> String {
        return NSLocalizedString("refresh", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Remove
      /// 
      /// Locales: en, de
      static func remove(_: Void = ()) -> String {
        return NSLocalizedString("remove", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repeat new password
      /// 
      /// Locales: en, de
      static func repeat_new_password(_: Void = ()) -> String {
        return NSLocalizedString("repeat_new_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repeat password
      /// 
      /// Locales: en, de
      static func repeat_password(_: Void = ()) -> String {
        return NSLocalizedString("repeat_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repetition do not match with password.
      /// 
      /// Locales: en, de
      static func invalid_repassword(_: Void = ()) -> String {
        return NSLocalizedString("invalid_repassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Resend email
      /// 
      /// Locales: en, de
      static func resend_email(_: Void = ()) -> String {
        return NSLocalizedString("resend_email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Resend verification link
      /// 
      /// Locales: en, de
      static func email_resend_confirmation(_: Void = ()) -> String {
        return NSLocalizedString("email_resend_confirmation", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset 2fa
      /// 
      /// Locales: en, de
      static func reset_2fa(_: Void = ()) -> String {
        return NSLocalizedString("reset_2fa", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset password
      /// 
      /// Locales: en, de
      static func reset_password(_: Void = ()) -> String {
        return NSLocalizedString("reset_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reveal
      /// 
      /// Locales: en, de
      static func reveal(_: Void = ()) -> String {
        return NSLocalizedString("reveal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Salutation
      /// 
      /// Locales: en, de
      static func salutation(_: Void = ()) -> String {
        return NSLocalizedString("salutation", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en, de
      static func save(_: Void = ()) -> String {
        return NSLocalizedString("save", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan
      /// 
      /// Locales: en, de
      static func scan(_: Void = ()) -> String {
        return NSLocalizedString("scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Security
      /// 
      /// Locales: en, de
      static func security(_: Void = ()) -> String {
        return NSLocalizedString("security", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sell
      /// 
      /// Locales: en, de
      static func sell(_: Void = ()) -> String {
        return NSLocalizedString("sell", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, de
      static func send(_: Void = ()) -> String {
        return NSLocalizedString("send", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send Feedback
      /// 
      /// Locales: en, de
      static func send_feedback(_: Void = ()) -> String {
        return NSLocalizedString("send_feedback", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send Payment
      /// 
      /// Locales: en
      static func send_payment(_: Void = ()) -> String {
        return NSLocalizedString("send_payment", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send other
      /// 
      /// Locales: en, de
      static func send_other(_: Void = ()) -> String {
        return NSLocalizedString("send_other", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, de
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Setup Wallet
      /// 
      /// Locales: en, de
      static func setup_wallet(_: Void = ()) -> String {
        return NSLocalizedString("setup_wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign Out
      /// 
      /// Locales: en, de
      static func signout(_: Void = ()) -> String {
        return NSLocalizedString("signout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign up
      /// 
      /// Locales: en, de
      static func signup(_: Void = ()) -> String {
        return NSLocalizedString("signup", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: State
      /// 
      /// Locales: en, de
      static func state(_: Void = ()) -> String {
        return NSLocalizedString("state", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Status
      /// 
      /// Locales: en, de
      static func status(_: Void = ()) -> String {
        return NSLocalizedString("status", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stellar
      /// 
      /// Locales: en, de
      static func stellar(_: Void = ()) -> String {
        return NSLocalizedString("stellar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stellar Currency (%@)
      /// 
      /// Locales: en
      static func chart_card_title2(_ value1: String) -> String {
        return String(format: NSLocalizedString("chart_card_title2", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Stellar Lumens (XLM)
      /// 
      /// Locales: en, de
      static func chart_card_title(_: Void = ()) -> String {
        return NSLocalizedString("chart_card_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stellar address
      /// 
      /// Locales: en
      static func stellar_address(_: Void = ()) -> String {
        return NSLocalizedString("stellar_address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stellar public key
      /// 
      /// Locales: en
      static func stellar_public_key(_: Void = ()) -> String {
        return NSLocalizedString("stellar_public_key", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Street address
      /// 
      /// Locales: en, de
      static func street_address(_: Void = ()) -> String {
        return NSLocalizedString("street_address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Street number
      /// 
      /// Locales: en, de
      static func street_number(_: Void = ()) -> String {
        return NSLocalizedString("street_number", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Submit
      /// 
      /// Locales: en, de
      static func submit(_: Void = ()) -> String {
        return NSLocalizedString("submit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Success
      /// 
      /// Locales: en, de
      static func success(_: Void = ()) -> String {
        return NSLocalizedString("success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Support inbox
      /// 
      /// Locales: en, de
      static func support_inbox(_: Void = ()) -> String {
        return NSLocalizedString("support_inbox", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This step is very important
      /// 
      /// Locales: en, de
      static func mnemonic_hint_title(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic_hint_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Title
      /// 
      /// Locales: en, de
      static func title(_: Void = ()) -> String {
        return NSLocalizedString("title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To change your 2FA Secret please insert your password.
      /// 
      /// Locales: en, de
      static func change_2fa_hint(_: Void = ()) -> String {
        return NSLocalizedString("change_2fa_hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To change your password please provide current and new password.
      /// 
      /// Locales: en, de
      static func change_password_hint(_: Void = ()) -> String {
        return NSLocalizedString("change_password_hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To prove the noting of your mnemonic, please complete following quiz.
      /// 
      /// Locales: en, de
      static func verify_mnemonic_hint(_: Void = ()) -> String {
        return NSLocalizedString("verify_mnemonic_hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To reveal your backup secret/mnemonic please provide your password.
      /// 
      /// Locales: en, de
      static func reveal_backup_mnemonic(_: Void = ()) -> String {
        return NSLocalizedString("reveal_backup_mnemonic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To setup 2FA, please:  1. Download a two-factor authenticator app (like Google Authenticator)  2. Copy and enter the above displayed 2FA secret code into the authenticator app  3. Enter the generated 2FA code from the authenticator app and press "Next"
      /// 
      /// Locales: en, de
      static func lbl_tfa_setup(_: Void = ()) -> String {
        return NSLocalizedString("lbl_tfa_setup", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Today
      /// 
      /// Locales: en, de
      static func lbl_today(_: Void = ()) -> String {
        return NSLocalizedString("lbl_today", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Topics
      /// 
      /// Locales: en, de
      static func topics(_: Void = ()) -> String {
        return NSLocalizedString("topics", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction fee
      /// 
      /// Locales: en, de
      static func transaction_fee(_: Void = ()) -> String {
        return NSLocalizedString("transaction_fee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction result
      /// 
      /// Locales: en, de
      static func transaction_result(_: Void = ()) -> String {
        return NSLocalizedString("transaction_result", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transactions
      /// 
      /// Locales: en, de
      static func transactions(_: Void = ()) -> String {
        return NSLocalizedString("transactions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unexpected data type
      /// 
      /// Locales: en, de
      static func unexpected_data_type(_: Void = ()) -> String {
        return NSLocalizedString("unexpected_data_type", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlock
      /// 
      /// Locales: en, de
      static func unlock_button(_: Void = ()) -> String {
        return NSLocalizedString("unlock_button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlock app
      /// 
      /// Locales: en, de
      static func unlock_app(_: Void = ()) -> String {
        return NSLocalizedString("unlock_app", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Update
      /// 
      /// Locales: en
      static func update(_: Void = ()) -> String {
        return NSLocalizedString("update", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Updated %@
      /// 
      /// Locales: en, de
      static func updated(_ value1: String) -> String {
        return String(format: NSLocalizedString("updated", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: User is not logged in
      /// 
      /// Locales: en, de
      static func user_not_logged_in(_: Void = ()) -> String {
        return NSLocalizedString("user_not_logged_in", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: User specific data
      /// 
      /// Locales: en, de
      static func user_data_title(_: Void = ()) -> String {
        return NSLocalizedString("user_data_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Username
      /// 
      /// Locales: en, de
      static func username(_: Void = ()) -> String {
        return NSLocalizedString("username", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verify your email address
      /// 
      /// Locales: en, de
      static func lbl_email_confirmation(_: Void = ()) -> String {
        return NSLocalizedString("lbl_email_confirmation", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View FAQ
      /// 
      /// Locales: en, de
      static func view_faq(_: Void = ()) -> String {
        return NSLocalizedString("view_faq", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: W
      /// 
      /// Locales: en, de
      static func lbl_week_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_week_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallets
      /// 
      /// Locales: en, de
      static func wallets(_: Void = ()) -> String {
        return NSLocalizedString("wallets", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We sent a verification message to
      /// 
      /// Locales: en, de
      static func email_confirmation_prehint(_: Void = ()) -> String {
        return NSLocalizedString("email_confirmation_prehint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Welcome
      /// 
      /// Locales: en, de
      static func welcome(_: Void = ()) -> String {
        return NSLocalizedString("welcome", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw money
      /// 
      /// Locales: en, de
      static func withdraw(_: Void = ()) -> String {
        return NSLocalizedString("withdraw", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong account or password
      /// 
      /// Locales: en, de
      static func bad_credentials(_: Void = ()) -> String {
        return NSLocalizedString("bad_credentials", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You must enter address OR public key
      /// 
      /// Locales: en
      static func stellar_address_error(_: Void = ()) -> String {
        return NSLocalizedString("stellar_address_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your 2FA secret: %@
      /// 
      /// Locales: en, de
      static func lbl_tfa_secret(_ value1: String) -> String {
        return String(format: NSLocalizedString("lbl_tfa_secret", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Your Secret (24 words mnemonic):
      /// 
      /// Locales: en, de
      static func mnemonic_words_title(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic_words_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your email address is not verified. We sent a verification message to your email account. Click the link to verify your email address. After doing so, please come back and press the "Already verified" button to finish resetting your password.
      /// 
      /// Locales: en, de
      static func email_confirmation_hint2(_: Void = ()) -> String {
        return NSLocalizedString("email_confirmation_hint2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your new 2FA secret: %@
      /// 
      /// Locales: en, de
      static func lbl_new_2fa_secret(_ value1: String) -> String {
        return String(format: NSLocalizedString("lbl_new_2fa_secret", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Zip code
      /// 
      /// Locales: en, de
      static func zip_code(_: Void = ()) -> String {
        return NSLocalizedString("zip_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: d
      /// 
      /// Locales: en, de
      static func lbl_day_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_day_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: day
      /// 
      /// Locales: en, de
      static func day(_: Void = ()) -> String {
        return NSLocalizedString("day", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: days
      /// 
      /// Locales: en, de
      static func days(_: Void = ()) -> String {
        return NSLocalizedString("days", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: h
      /// 
      /// Locales: en, de
      static func lbl_hour_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_hour_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: here
      /// 
      /// Locales: en, de
      static func here(_: Void = ()) -> String {
        return NSLocalizedString("here", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: hour
      /// 
      /// Locales: en
      static func hour(_: Void = ()) -> String {
        return NSLocalizedString("hour", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: hours
      /// 
      /// Locales: en
      static func hours(_: Void = ()) -> String {
        return NSLocalizedString("hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: loading
      /// 
      /// Locales: en, de
      static func loading(_: Void = ()) -> String {
        return NSLocalizedString("loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: m
      /// 
      /// Locales: en, de
      static func lbl_minute_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_minute_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: month
      /// 
      /// Locales: en
      static func month(_: Void = ()) -> String {
        return NSLocalizedString("month", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: months
      /// 
      /// Locales: en
      static func months(_: Void = ()) -> String {
        return NSLocalizedString("months", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: no stellar address
      /// 
      /// Locales: en
      static func no_stellar_address(_: Void = ()) -> String {
        return NSLocalizedString("no_stellar_address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one capital letter
      /// 
      /// Locales: en, de
      static func password_hint3_prefix(_: Void = ()) -> String {
        return NSLocalizedString("password_hint3_prefix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one day ago
      /// 
      /// Locales: en, de
      static func lbl_moment_day_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_day_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one hour ago
      /// 
      /// Locales: en, de
      static func lbl_moment_hour_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_hour_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one minute ago
      /// 
      /// Locales: en, de
      static func lbl_moment_minute_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_minute_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one month ago
      /// 
      /// Locales: en, de
      static func lbl_moment_month_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_month_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one number
      /// 
      /// Locales: en, de
      static func password_hint4_prefix(_: Void = ()) -> String {
        return NSLocalizedString("password_hint4_prefix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one second ago
      /// 
      /// Locales: en, de
      static func lbl_moment_second_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_second_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one small letter
      /// 
      /// Locales: en, de
      static func password_hint2_prefix(_: Void = ()) -> String {
        return NSLocalizedString("password_hint2_prefix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one week ago
      /// 
      /// Locales: en, de
      static func lbl_moment_week_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_week_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: one year ago
      /// 
      /// Locales: en, de
      static func lbl_moment_year_count(_: Void = ()) -> String {
        return NSLocalizedString("lbl_moment_year_count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: password
      /// 
      /// Locales: en, de
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: step %@ of 3
      /// 
      /// Locales: en, de
      static func step_3(_ value1: String) -> String {
        return String(format: NSLocalizedString("step_3", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: week
      /// 
      /// Locales: en
      static func week(_: Void = ()) -> String {
        return NSLocalizedString("week", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: weeks
      /// 
      /// Locales: en
      static func weeks(_: Void = ()) -> String {
        return NSLocalizedString("weeks", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: y
      /// 
      /// Locales: en, de
      static func lbl_year_suffix(_: Void = ()) -> String {
        return NSLocalizedString("lbl_year_suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: year
      /// 
      /// Locales: en
      static func year(_: Void = ()) -> String {
        return NSLocalizedString("year", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: years
      /// 
      /// Locales: en
      static func years(_: Void = ()) -> String {
        return NSLocalizedString("years", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _LockedView.validate()
      try _HomeFundedWalletHeaderView.validate()
      try _AccountDetailsViewController.validate()
      try _WalletCardInfoViewController.validate()
      try _WalletDetailsViewController.validate()
      try _UnfundedWalletCardContentView.validate()
      try _HomeUnfundedWalletHeaderView.validate()
      try _FundTestNetWalletViewController.validate()
      try _FundWalletViewController.validate()
      try _ReceivePaymentCardViewController.validate()
    }
    
    struct _AccountCurrenciesViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountCurrenciesViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AccountDetailsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AccountDetailsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'copy' is used in nib 'AccountDetailsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AddCurrencyViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddCurrencyViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CurrencyFeeInfoViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CurrencyFeeInfoViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CurrencyView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CurrencyView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyView
      }
      
      fileprivate init() {}
    }
    
    struct _FundTestNetWalletViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FundTestNetWalletViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "compose", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'compose' is used in nib 'FundTestNetWalletViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FundWalletViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FundWalletViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "qr_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qr_placeholder' is used in nib 'FundWalletViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "compose", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'compose' is used in nib 'FundWalletViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeFundedWalletHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeFundedWalletHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeFundedWalletHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeFundedWalletHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "receive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'receive' is used in nib 'HomeFundedWalletHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'send' is used in nib 'HomeFundedWalletHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'more' is used in nib 'HomeFundedWalletHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'HomeFundedWalletHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeUnfundedWalletHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeUnfundedWalletHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeUnfundedWalletHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeUnfundedWalletHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'HomeUnfundedWalletHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _IconView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IconView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _KnownCurrenciesTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "KnownCurrenciesTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> KnownCurrenciesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? KnownCurrenciesTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _KnownCurrenciesTableViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "KnownCurrenciesTableViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _KnownInflationDestinationDetailsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "KnownInflationDestinationDetailsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _KnownInflationDestinationsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "KnownInflationDestinationsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> KnownInflationDestinationsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? KnownInflationDestinationsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _KnownInflationDestinationsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "KnownInflationDestinationsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LoadTransactionsHistoryViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadTransactionsHistoryViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LockedView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LockedView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'LockedView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NativeCurrencyFeeInfoViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NativeCurrencyFeeInfoViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NoMultiSigSupportViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NoMultiSigSupportViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PasswordView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PasswordView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PasswordView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PasswordView
      }
      
      fileprivate init() {}
    }
    
    struct _ProvideCurrencyDataViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProvideCurrencyDataViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ProvideInflationDestinationViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProvideInflationDestinationViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ReceivePaymentCardViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ReceivePaymentCardViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'copy' is used in nib 'ReceivePaymentCardViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "question", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'question' is used in nib 'ReceivePaymentCardViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qr_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qr_placeholder' is used in nib 'ReceivePaymentCardViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ReceivePaymentPrintView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReceivePaymentPrintView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReceivePaymentPrintView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReceivePaymentPrintView
      }
      
      fileprivate init() {}
    }
    
    struct _RemoveCurrencyViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RemoveCurrencyViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SendViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SendViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SetInflationDestinationViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SetInflationDestinationViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TitleView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TitleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleView
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionHistoryDetailsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionHistoryDetailsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionHistoryTableViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionHistoryTableViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionResultPrintView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionResultPrintView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionResultPrintView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionResultPrintView
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionResultViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionResultViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _UnfundedWalletCardContentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UnfundedWalletCardContentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UnfundedWalletCardContentView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UnfundedWalletCardContentView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "question", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'question' is used in nib 'UnfundedWalletCardContentView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _WalletCardContentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WalletCardContentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletCardContentView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletCardContentView
      }
      
      fileprivate init() {}
    }
    
    struct _WalletCardInfoViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletCardInfoViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "question", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'question' is used in nib 'WalletCardInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in nib 'WalletCardInfoViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _WalletDetailsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletDetailsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'copy' is used in nib 'WalletDetailsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
